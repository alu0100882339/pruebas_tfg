/* File: cll.PAPI3_EVENTS.h; Automatically generated by ./cll.CREATE_PAPI_H.sh */
/*
 * PAPI_L1_DCM DEFINITIONS 
 */
#define PAPI_L1_DCM_INIT(exp) \
	 (exp).PAPI_L1_DCM_MASK = PAPI_L1_DCM; \
   (exp).PAPI_L1_DCM_SET = add_test_event((exp).PAPI_L1_DCM_MASK) 
	 /* ; printf("INIT:PAPI_L1_DCM_SET handle: %d\n",(exp).PAPI_L1_DCM_SET); */
				
#define PAPI_L1_DCM_TMPS  int PAPI_L1_DCM_SET, \
                             PAPI_L1_DCM_MASK; \
                         long long PAPI_L1_DCM_VALUE
												 
#define PAPI_L1_DCM_DECL  long long PAPI_L1_DCM_VAR

#define PAPI_L1_DCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_DCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_DCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_DCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_DCM_SET,&(exp).PAPI_L1_DCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_DCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_DCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_DCM_VAR = (exp1).PAPI_L1_DCM_VALUE

#define PAPI_L1_DCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_DCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_DCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_DCM")
#define PAPI_L1_DCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_DCM_VAR); 


#define PAPI_L1_DCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_DCM_SET,(exp).PAPI_L1_DCM_MASK)


/*
 * PAPI_L1_ICM DEFINITIONS 
 */
#define PAPI_L1_ICM_INIT(exp) \
	 (exp).PAPI_L1_ICM_MASK = PAPI_L1_ICM; \
   (exp).PAPI_L1_ICM_SET = add_test_event((exp).PAPI_L1_ICM_MASK) 
	 /* ; printf("INIT:PAPI_L1_ICM_SET handle: %d\n",(exp).PAPI_L1_ICM_SET); */
				
#define PAPI_L1_ICM_TMPS  int PAPI_L1_ICM_SET, \
                             PAPI_L1_ICM_MASK; \
                         long long PAPI_L1_ICM_VALUE
												 
#define PAPI_L1_ICM_DECL  long long PAPI_L1_ICM_VAR

#define PAPI_L1_ICM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_ICM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_ICM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_ICM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_ICM_SET,&(exp).PAPI_L1_ICM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_ICM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_ICM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_ICM_VAR = (exp1).PAPI_L1_ICM_VALUE

#define PAPI_L1_ICM_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_ICM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_ICM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_ICM")
#define PAPI_L1_ICM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_ICM_VAR); 


#define PAPI_L1_ICM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_ICM_SET,(exp).PAPI_L1_ICM_MASK)


/*
 * PAPI_L2_DCM DEFINITIONS 
 */
#define PAPI_L2_DCM_INIT(exp) \
	 (exp).PAPI_L2_DCM_MASK = PAPI_L2_DCM; \
   (exp).PAPI_L2_DCM_SET = add_test_event((exp).PAPI_L2_DCM_MASK) 
	 /* ; printf("INIT:PAPI_L2_DCM_SET handle: %d\n",(exp).PAPI_L2_DCM_SET); */
				
#define PAPI_L2_DCM_TMPS  int PAPI_L2_DCM_SET, \
                             PAPI_L2_DCM_MASK; \
                         long long PAPI_L2_DCM_VALUE
												 
#define PAPI_L2_DCM_DECL  long long PAPI_L2_DCM_VAR

#define PAPI_L2_DCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_DCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_DCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_DCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_DCM_SET,&(exp).PAPI_L2_DCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_DCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_DCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_DCM_VAR = (exp1).PAPI_L2_DCM_VALUE

#define PAPI_L2_DCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_DCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_DCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_DCM")
#define PAPI_L2_DCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_DCM_VAR); 


#define PAPI_L2_DCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_DCM_SET,(exp).PAPI_L2_DCM_MASK)


/*
 * PAPI_L2_ICM DEFINITIONS 
 */
#define PAPI_L2_ICM_INIT(exp) \
	 (exp).PAPI_L2_ICM_MASK = PAPI_L2_ICM; \
   (exp).PAPI_L2_ICM_SET = add_test_event((exp).PAPI_L2_ICM_MASK) 
	 /* ; printf("INIT:PAPI_L2_ICM_SET handle: %d\n",(exp).PAPI_L2_ICM_SET); */
				
#define PAPI_L2_ICM_TMPS  int PAPI_L2_ICM_SET, \
                             PAPI_L2_ICM_MASK; \
                         long long PAPI_L2_ICM_VALUE
												 
#define PAPI_L2_ICM_DECL  long long PAPI_L2_ICM_VAR

#define PAPI_L2_ICM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_ICM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_ICM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_ICM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_ICM_SET,&(exp).PAPI_L2_ICM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_ICM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_ICM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_ICM_VAR = (exp1).PAPI_L2_ICM_VALUE

#define PAPI_L2_ICM_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_ICM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_ICM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_ICM")
#define PAPI_L2_ICM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_ICM_VAR); 


#define PAPI_L2_ICM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_ICM_SET,(exp).PAPI_L2_ICM_MASK)


/*
 * PAPI_L3_DCM DEFINITIONS 
 */
#define PAPI_L3_DCM_INIT(exp) \
	 (exp).PAPI_L3_DCM_MASK = PAPI_L3_DCM; \
   (exp).PAPI_L3_DCM_SET = add_test_event((exp).PAPI_L3_DCM_MASK) 
	 /* ; printf("INIT:PAPI_L3_DCM_SET handle: %d\n",(exp).PAPI_L3_DCM_SET); */
				
#define PAPI_L3_DCM_TMPS  int PAPI_L3_DCM_SET, \
                             PAPI_L3_DCM_MASK; \
                         long long PAPI_L3_DCM_VALUE
												 
#define PAPI_L3_DCM_DECL  long long PAPI_L3_DCM_VAR

#define PAPI_L3_DCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_DCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_DCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_DCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_DCM_SET,&(exp).PAPI_L3_DCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_DCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_DCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_DCM_VAR = (exp1).PAPI_L3_DCM_VALUE

#define PAPI_L3_DCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_DCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_DCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_DCM")
#define PAPI_L3_DCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_DCM_VAR); 


#define PAPI_L3_DCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_DCM_SET,(exp).PAPI_L3_DCM_MASK)


/*
 * PAPI_L3_ICM DEFINITIONS 
 */
#define PAPI_L3_ICM_INIT(exp) \
	 (exp).PAPI_L3_ICM_MASK = PAPI_L3_ICM; \
   (exp).PAPI_L3_ICM_SET = add_test_event((exp).PAPI_L3_ICM_MASK) 
	 /* ; printf("INIT:PAPI_L3_ICM_SET handle: %d\n",(exp).PAPI_L3_ICM_SET); */
				
#define PAPI_L3_ICM_TMPS  int PAPI_L3_ICM_SET, \
                             PAPI_L3_ICM_MASK; \
                         long long PAPI_L3_ICM_VALUE
												 
#define PAPI_L3_ICM_DECL  long long PAPI_L3_ICM_VAR

#define PAPI_L3_ICM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_ICM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_ICM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_ICM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_ICM_SET,&(exp).PAPI_L3_ICM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_ICM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_ICM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_ICM_VAR = (exp1).PAPI_L3_ICM_VALUE

#define PAPI_L3_ICM_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_ICM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_ICM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_ICM")
#define PAPI_L3_ICM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_ICM_VAR); 


#define PAPI_L3_ICM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_ICM_SET,(exp).PAPI_L3_ICM_MASK)


/*
 * PAPI_L1_TCM DEFINITIONS 
 */
#define PAPI_L1_TCM_INIT(exp) \
	 (exp).PAPI_L1_TCM_MASK = PAPI_L1_TCM; \
   (exp).PAPI_L1_TCM_SET = add_test_event((exp).PAPI_L1_TCM_MASK) 
	 /* ; printf("INIT:PAPI_L1_TCM_SET handle: %d\n",(exp).PAPI_L1_TCM_SET); */
				
#define PAPI_L1_TCM_TMPS  int PAPI_L1_TCM_SET, \
                             PAPI_L1_TCM_MASK; \
                         long long PAPI_L1_TCM_VALUE
												 
#define PAPI_L1_TCM_DECL  long long PAPI_L1_TCM_VAR

#define PAPI_L1_TCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_TCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_TCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_TCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_TCM_SET,&(exp).PAPI_L1_TCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_TCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_TCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_TCM_VAR = (exp1).PAPI_L1_TCM_VALUE

#define PAPI_L1_TCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_TCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_TCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_TCM")
#define PAPI_L1_TCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_TCM_VAR); 


#define PAPI_L1_TCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_TCM_SET,(exp).PAPI_L1_TCM_MASK)


/*
 * PAPI_L2_TCM DEFINITIONS 
 */
#define PAPI_L2_TCM_INIT(exp) \
	 (exp).PAPI_L2_TCM_MASK = PAPI_L2_TCM; \
   (exp).PAPI_L2_TCM_SET = add_test_event((exp).PAPI_L2_TCM_MASK) 
	 /* ; printf("INIT:PAPI_L2_TCM_SET handle: %d\n",(exp).PAPI_L2_TCM_SET); */
				
#define PAPI_L2_TCM_TMPS  int PAPI_L2_TCM_SET, \
                             PAPI_L2_TCM_MASK; \
                         long long PAPI_L2_TCM_VALUE
												 
#define PAPI_L2_TCM_DECL  long long PAPI_L2_TCM_VAR

#define PAPI_L2_TCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_TCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_TCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_TCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_TCM_SET,&(exp).PAPI_L2_TCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_TCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_TCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_TCM_VAR = (exp1).PAPI_L2_TCM_VALUE

#define PAPI_L2_TCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_TCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_TCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_TCM")
#define PAPI_L2_TCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_TCM_VAR); 


#define PAPI_L2_TCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_TCM_SET,(exp).PAPI_L2_TCM_MASK)


/*
 * PAPI_L3_TCM DEFINITIONS 
 */
#define PAPI_L3_TCM_INIT(exp) \
	 (exp).PAPI_L3_TCM_MASK = PAPI_L3_TCM; \
   (exp).PAPI_L3_TCM_SET = add_test_event((exp).PAPI_L3_TCM_MASK) 
	 /* ; printf("INIT:PAPI_L3_TCM_SET handle: %d\n",(exp).PAPI_L3_TCM_SET); */
				
#define PAPI_L3_TCM_TMPS  int PAPI_L3_TCM_SET, \
                             PAPI_L3_TCM_MASK; \
                         long long PAPI_L3_TCM_VALUE
												 
#define PAPI_L3_TCM_DECL  long long PAPI_L3_TCM_VAR

#define PAPI_L3_TCM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_TCM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_TCM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_TCM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_TCM_SET,&(exp).PAPI_L3_TCM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_TCM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_TCM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_TCM_VAR = (exp1).PAPI_L3_TCM_VALUE

#define PAPI_L3_TCM_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_TCM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_TCM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_TCM")
#define PAPI_L3_TCM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_TCM_VAR); 


#define PAPI_L3_TCM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_TCM_SET,(exp).PAPI_L3_TCM_MASK)


/*
 * PAPI_CA_SNP DEFINITIONS 
 */
#define PAPI_CA_SNP_INIT(exp) \
	 (exp).PAPI_CA_SNP_MASK = PAPI_CA_SNP; \
   (exp).PAPI_CA_SNP_SET = add_test_event((exp).PAPI_CA_SNP_MASK) 
	 /* ; printf("INIT:PAPI_CA_SNP_SET handle: %d\n",(exp).PAPI_CA_SNP_SET); */
				
#define PAPI_CA_SNP_TMPS  int PAPI_CA_SNP_SET, \
                             PAPI_CA_SNP_MASK; \
                         long long PAPI_CA_SNP_VALUE
												 
#define PAPI_CA_SNP_DECL  long long PAPI_CA_SNP_VAR

#define PAPI_CA_SNP_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CA_SNP_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CA_SNP", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CA_SNP_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CA_SNP_SET,&(exp).PAPI_CA_SNP_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CA_SNP", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CA_SNP_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CA_SNP_VAR = (exp1).PAPI_CA_SNP_VALUE

#define PAPI_CA_SNP_SAVE_INSTANCE(exp,inst) \
        PAPI_CA_SNP_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CA_SNP_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CA_SNP")
#define PAPI_CA_SNP_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CA_SNP_VAR); 


#define PAPI_CA_SNP_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CA_SNP_SET,(exp).PAPI_CA_SNP_MASK)


/*
 * PAPI_CA_SHR DEFINITIONS 
 */
#define PAPI_CA_SHR_INIT(exp) \
	 (exp).PAPI_CA_SHR_MASK = PAPI_CA_SHR; \
   (exp).PAPI_CA_SHR_SET = add_test_event((exp).PAPI_CA_SHR_MASK) 
	 /* ; printf("INIT:PAPI_CA_SHR_SET handle: %d\n",(exp).PAPI_CA_SHR_SET); */
				
#define PAPI_CA_SHR_TMPS  int PAPI_CA_SHR_SET, \
                             PAPI_CA_SHR_MASK; \
                         long long PAPI_CA_SHR_VALUE
												 
#define PAPI_CA_SHR_DECL  long long PAPI_CA_SHR_VAR

#define PAPI_CA_SHR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CA_SHR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CA_SHR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CA_SHR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CA_SHR_SET,&(exp).PAPI_CA_SHR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CA_SHR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CA_SHR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CA_SHR_VAR = (exp1).PAPI_CA_SHR_VALUE

#define PAPI_CA_SHR_SAVE_INSTANCE(exp,inst) \
        PAPI_CA_SHR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CA_SHR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CA_SHR")
#define PAPI_CA_SHR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CA_SHR_VAR); 


#define PAPI_CA_SHR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CA_SHR_SET,(exp).PAPI_CA_SHR_MASK)


/*
 * PAPI_CA_CLN DEFINITIONS 
 */
#define PAPI_CA_CLN_INIT(exp) \
	 (exp).PAPI_CA_CLN_MASK = PAPI_CA_CLN; \
   (exp).PAPI_CA_CLN_SET = add_test_event((exp).PAPI_CA_CLN_MASK) 
	 /* ; printf("INIT:PAPI_CA_CLN_SET handle: %d\n",(exp).PAPI_CA_CLN_SET); */
				
#define PAPI_CA_CLN_TMPS  int PAPI_CA_CLN_SET, \
                             PAPI_CA_CLN_MASK; \
                         long long PAPI_CA_CLN_VALUE
												 
#define PAPI_CA_CLN_DECL  long long PAPI_CA_CLN_VAR

#define PAPI_CA_CLN_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CA_CLN_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CA_CLN", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CA_CLN_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CA_CLN_SET,&(exp).PAPI_CA_CLN_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CA_CLN", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CA_CLN_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CA_CLN_VAR = (exp1).PAPI_CA_CLN_VALUE

#define PAPI_CA_CLN_SAVE_INSTANCE(exp,inst) \
        PAPI_CA_CLN_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CA_CLN_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CA_CLN")
#define PAPI_CA_CLN_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CA_CLN_VAR); 


#define PAPI_CA_CLN_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CA_CLN_SET,(exp).PAPI_CA_CLN_MASK)


/*
 * PAPI_CA_INV DEFINITIONS 
 */
#define PAPI_CA_INV_INIT(exp) \
	 (exp).PAPI_CA_INV_MASK = PAPI_CA_INV; \
   (exp).PAPI_CA_INV_SET = add_test_event((exp).PAPI_CA_INV_MASK) 
	 /* ; printf("INIT:PAPI_CA_INV_SET handle: %d\n",(exp).PAPI_CA_INV_SET); */
				
#define PAPI_CA_INV_TMPS  int PAPI_CA_INV_SET, \
                             PAPI_CA_INV_MASK; \
                         long long PAPI_CA_INV_VALUE
												 
#define PAPI_CA_INV_DECL  long long PAPI_CA_INV_VAR

#define PAPI_CA_INV_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CA_INV_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CA_INV", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CA_INV_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CA_INV_SET,&(exp).PAPI_CA_INV_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CA_INV", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CA_INV_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CA_INV_VAR = (exp1).PAPI_CA_INV_VALUE

#define PAPI_CA_INV_SAVE_INSTANCE(exp,inst) \
        PAPI_CA_INV_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CA_INV_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CA_INV")
#define PAPI_CA_INV_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CA_INV_VAR); 


#define PAPI_CA_INV_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CA_INV_SET,(exp).PAPI_CA_INV_MASK)


/*
 * PAPI_CA_ITV DEFINITIONS 
 */
#define PAPI_CA_ITV_INIT(exp) \
	 (exp).PAPI_CA_ITV_MASK = PAPI_CA_ITV; \
   (exp).PAPI_CA_ITV_SET = add_test_event((exp).PAPI_CA_ITV_MASK) 
	 /* ; printf("INIT:PAPI_CA_ITV_SET handle: %d\n",(exp).PAPI_CA_ITV_SET); */
				
#define PAPI_CA_ITV_TMPS  int PAPI_CA_ITV_SET, \
                             PAPI_CA_ITV_MASK; \
                         long long PAPI_CA_ITV_VALUE
												 
#define PAPI_CA_ITV_DECL  long long PAPI_CA_ITV_VAR

#define PAPI_CA_ITV_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CA_ITV_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CA_ITV", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CA_ITV_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CA_ITV_SET,&(exp).PAPI_CA_ITV_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CA_ITV", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CA_ITV_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CA_ITV_VAR = (exp1).PAPI_CA_ITV_VALUE

#define PAPI_CA_ITV_SAVE_INSTANCE(exp,inst) \
        PAPI_CA_ITV_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CA_ITV_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CA_ITV")
#define PAPI_CA_ITV_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CA_ITV_VAR); 


#define PAPI_CA_ITV_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CA_ITV_SET,(exp).PAPI_CA_ITV_MASK)


/*
 * PAPI_L3_LDM DEFINITIONS 
 */
#define PAPI_L3_LDM_INIT(exp) \
	 (exp).PAPI_L3_LDM_MASK = PAPI_L3_LDM; \
   (exp).PAPI_L3_LDM_SET = add_test_event((exp).PAPI_L3_LDM_MASK) 
	 /* ; printf("INIT:PAPI_L3_LDM_SET handle: %d\n",(exp).PAPI_L3_LDM_SET); */
				
#define PAPI_L3_LDM_TMPS  int PAPI_L3_LDM_SET, \
                             PAPI_L3_LDM_MASK; \
                         long long PAPI_L3_LDM_VALUE
												 
#define PAPI_L3_LDM_DECL  long long PAPI_L3_LDM_VAR

#define PAPI_L3_LDM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_LDM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_LDM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_LDM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_LDM_SET,&(exp).PAPI_L3_LDM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_LDM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_LDM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_LDM_VAR = (exp1).PAPI_L3_LDM_VALUE

#define PAPI_L3_LDM_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_LDM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_LDM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_LDM")
#define PAPI_L3_LDM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_LDM_VAR); 


#define PAPI_L3_LDM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_LDM_SET,(exp).PAPI_L3_LDM_MASK)


/*
 * PAPI_L3_STM DEFINITIONS 
 */
#define PAPI_L3_STM_INIT(exp) \
	 (exp).PAPI_L3_STM_MASK = PAPI_L3_STM; \
   (exp).PAPI_L3_STM_SET = add_test_event((exp).PAPI_L3_STM_MASK) 
	 /* ; printf("INIT:PAPI_L3_STM_SET handle: %d\n",(exp).PAPI_L3_STM_SET); */
				
#define PAPI_L3_STM_TMPS  int PAPI_L3_STM_SET, \
                             PAPI_L3_STM_MASK; \
                         long long PAPI_L3_STM_VALUE
												 
#define PAPI_L3_STM_DECL  long long PAPI_L3_STM_VAR

#define PAPI_L3_STM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_STM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_STM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_STM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_STM_SET,&(exp).PAPI_L3_STM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_STM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_STM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_STM_VAR = (exp1).PAPI_L3_STM_VALUE

#define PAPI_L3_STM_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_STM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_STM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_STM")
#define PAPI_L3_STM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_STM_VAR); 


#define PAPI_L3_STM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_STM_SET,(exp).PAPI_L3_STM_MASK)


/*
 * PAPI_BRU_IDL DEFINITIONS 
 */
#define PAPI_BRU_IDL_INIT(exp) \
	 (exp).PAPI_BRU_IDL_MASK = PAPI_BRU_IDL; \
   (exp).PAPI_BRU_IDL_SET = add_test_event((exp).PAPI_BRU_IDL_MASK) 
	 /* ; printf("INIT:PAPI_BRU_IDL_SET handle: %d\n",(exp).PAPI_BRU_IDL_SET); */
				
#define PAPI_BRU_IDL_TMPS  int PAPI_BRU_IDL_SET, \
                             PAPI_BRU_IDL_MASK; \
                         long long PAPI_BRU_IDL_VALUE
												 
#define PAPI_BRU_IDL_DECL  long long PAPI_BRU_IDL_VAR

#define PAPI_BRU_IDL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BRU_IDL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BRU_IDL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BRU_IDL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BRU_IDL_SET,&(exp).PAPI_BRU_IDL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BRU_IDL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BRU_IDL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BRU_IDL_VAR = (exp1).PAPI_BRU_IDL_VALUE

#define PAPI_BRU_IDL_SAVE_INSTANCE(exp,inst) \
        PAPI_BRU_IDL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BRU_IDL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BRU_IDL")
#define PAPI_BRU_IDL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BRU_IDL_VAR); 


#define PAPI_BRU_IDL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BRU_IDL_SET,(exp).PAPI_BRU_IDL_MASK)


/*
 * PAPI_FXU_IDL DEFINITIONS 
 */
#define PAPI_FXU_IDL_INIT(exp) \
	 (exp).PAPI_FXU_IDL_MASK = PAPI_FXU_IDL; \
   (exp).PAPI_FXU_IDL_SET = add_test_event((exp).PAPI_FXU_IDL_MASK) 
	 /* ; printf("INIT:PAPI_FXU_IDL_SET handle: %d\n",(exp).PAPI_FXU_IDL_SET); */
				
#define PAPI_FXU_IDL_TMPS  int PAPI_FXU_IDL_SET, \
                             PAPI_FXU_IDL_MASK; \
                         long long PAPI_FXU_IDL_VALUE
												 
#define PAPI_FXU_IDL_DECL  long long PAPI_FXU_IDL_VAR

#define PAPI_FXU_IDL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FXU_IDL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FXU_IDL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FXU_IDL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FXU_IDL_SET,&(exp).PAPI_FXU_IDL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FXU_IDL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FXU_IDL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FXU_IDL_VAR = (exp1).PAPI_FXU_IDL_VALUE

#define PAPI_FXU_IDL_SAVE_INSTANCE(exp,inst) \
        PAPI_FXU_IDL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FXU_IDL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FXU_IDL")
#define PAPI_FXU_IDL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FXU_IDL_VAR); 


#define PAPI_FXU_IDL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FXU_IDL_SET,(exp).PAPI_FXU_IDL_MASK)


/*
 * PAPI_FPU_IDL DEFINITIONS 
 */
#define PAPI_FPU_IDL_INIT(exp) \
	 (exp).PAPI_FPU_IDL_MASK = PAPI_FPU_IDL; \
   (exp).PAPI_FPU_IDL_SET = add_test_event((exp).PAPI_FPU_IDL_MASK) 
	 /* ; printf("INIT:PAPI_FPU_IDL_SET handle: %d\n",(exp).PAPI_FPU_IDL_SET); */
				
#define PAPI_FPU_IDL_TMPS  int PAPI_FPU_IDL_SET, \
                             PAPI_FPU_IDL_MASK; \
                         long long PAPI_FPU_IDL_VALUE
												 
#define PAPI_FPU_IDL_DECL  long long PAPI_FPU_IDL_VAR

#define PAPI_FPU_IDL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FPU_IDL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FPU_IDL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FPU_IDL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FPU_IDL_SET,&(exp).PAPI_FPU_IDL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FPU_IDL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FPU_IDL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FPU_IDL_VAR = (exp1).PAPI_FPU_IDL_VALUE

#define PAPI_FPU_IDL_SAVE_INSTANCE(exp,inst) \
        PAPI_FPU_IDL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FPU_IDL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FPU_IDL")
#define PAPI_FPU_IDL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FPU_IDL_VAR); 


#define PAPI_FPU_IDL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FPU_IDL_SET,(exp).PAPI_FPU_IDL_MASK)


/*
 * PAPI_LSU_IDL DEFINITIONS 
 */
#define PAPI_LSU_IDL_INIT(exp) \
	 (exp).PAPI_LSU_IDL_MASK = PAPI_LSU_IDL; \
   (exp).PAPI_LSU_IDL_SET = add_test_event((exp).PAPI_LSU_IDL_MASK) 
	 /* ; printf("INIT:PAPI_LSU_IDL_SET handle: %d\n",(exp).PAPI_LSU_IDL_SET); */
				
#define PAPI_LSU_IDL_TMPS  int PAPI_LSU_IDL_SET, \
                             PAPI_LSU_IDL_MASK; \
                         long long PAPI_LSU_IDL_VALUE
												 
#define PAPI_LSU_IDL_DECL  long long PAPI_LSU_IDL_VAR

#define PAPI_LSU_IDL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_LSU_IDL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "LSU_IDL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_LSU_IDL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_LSU_IDL_SET,&(exp).PAPI_LSU_IDL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "LSU_IDL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_LSU_IDL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_LSU_IDL_VAR = (exp1).PAPI_LSU_IDL_VALUE

#define PAPI_LSU_IDL_SAVE_INSTANCE(exp,inst) \
        PAPI_LSU_IDL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_LSU_IDL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_LSU_IDL")
#define PAPI_LSU_IDL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_LSU_IDL_VAR); 


#define PAPI_LSU_IDL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_LSU_IDL_SET,(exp).PAPI_LSU_IDL_MASK)


/*
 * PAPI_TLB_DM DEFINITIONS 
 */
#define PAPI_TLB_DM_INIT(exp) \
	 (exp).PAPI_TLB_DM_MASK = PAPI_TLB_DM; \
   (exp).PAPI_TLB_DM_SET = add_test_event((exp).PAPI_TLB_DM_MASK) 
	 /* ; printf("INIT:PAPI_TLB_DM_SET handle: %d\n",(exp).PAPI_TLB_DM_SET); */
				
#define PAPI_TLB_DM_TMPS  int PAPI_TLB_DM_SET, \
                             PAPI_TLB_DM_MASK; \
                         long long PAPI_TLB_DM_VALUE
												 
#define PAPI_TLB_DM_DECL  long long PAPI_TLB_DM_VAR

#define PAPI_TLB_DM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TLB_DM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TLB_DM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TLB_DM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TLB_DM_SET,&(exp).PAPI_TLB_DM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TLB_DM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TLB_DM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TLB_DM_VAR = (exp1).PAPI_TLB_DM_VALUE

#define PAPI_TLB_DM_SAVE_INSTANCE(exp,inst) \
        PAPI_TLB_DM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TLB_DM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TLB_DM")
#define PAPI_TLB_DM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TLB_DM_VAR); 


#define PAPI_TLB_DM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TLB_DM_SET,(exp).PAPI_TLB_DM_MASK)


/*
 * PAPI_TLB_IM DEFINITIONS 
 */
#define PAPI_TLB_IM_INIT(exp) \
	 (exp).PAPI_TLB_IM_MASK = PAPI_TLB_IM; \
   (exp).PAPI_TLB_IM_SET = add_test_event((exp).PAPI_TLB_IM_MASK) 
	 /* ; printf("INIT:PAPI_TLB_IM_SET handle: %d\n",(exp).PAPI_TLB_IM_SET); */
				
#define PAPI_TLB_IM_TMPS  int PAPI_TLB_IM_SET, \
                             PAPI_TLB_IM_MASK; \
                         long long PAPI_TLB_IM_VALUE
												 
#define PAPI_TLB_IM_DECL  long long PAPI_TLB_IM_VAR

#define PAPI_TLB_IM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TLB_IM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TLB_IM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TLB_IM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TLB_IM_SET,&(exp).PAPI_TLB_IM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TLB_IM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TLB_IM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TLB_IM_VAR = (exp1).PAPI_TLB_IM_VALUE

#define PAPI_TLB_IM_SAVE_INSTANCE(exp,inst) \
        PAPI_TLB_IM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TLB_IM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TLB_IM")
#define PAPI_TLB_IM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TLB_IM_VAR); 


#define PAPI_TLB_IM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TLB_IM_SET,(exp).PAPI_TLB_IM_MASK)


/*
 * PAPI_TLB_TL DEFINITIONS 
 */
#define PAPI_TLB_TL_INIT(exp) \
	 (exp).PAPI_TLB_TL_MASK = PAPI_TLB_TL; \
   (exp).PAPI_TLB_TL_SET = add_test_event((exp).PAPI_TLB_TL_MASK) 
	 /* ; printf("INIT:PAPI_TLB_TL_SET handle: %d\n",(exp).PAPI_TLB_TL_SET); */
				
#define PAPI_TLB_TL_TMPS  int PAPI_TLB_TL_SET, \
                             PAPI_TLB_TL_MASK; \
                         long long PAPI_TLB_TL_VALUE
												 
#define PAPI_TLB_TL_DECL  long long PAPI_TLB_TL_VAR

#define PAPI_TLB_TL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TLB_TL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TLB_TL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TLB_TL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TLB_TL_SET,&(exp).PAPI_TLB_TL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TLB_TL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TLB_TL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TLB_TL_VAR = (exp1).PAPI_TLB_TL_VALUE

#define PAPI_TLB_TL_SAVE_INSTANCE(exp,inst) \
        PAPI_TLB_TL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TLB_TL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TLB_TL")
#define PAPI_TLB_TL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TLB_TL_VAR); 


#define PAPI_TLB_TL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TLB_TL_SET,(exp).PAPI_TLB_TL_MASK)


/*
 * PAPI_L1_LDM DEFINITIONS 
 */
#define PAPI_L1_LDM_INIT(exp) \
	 (exp).PAPI_L1_LDM_MASK = PAPI_L1_LDM; \
   (exp).PAPI_L1_LDM_SET = add_test_event((exp).PAPI_L1_LDM_MASK) 
	 /* ; printf("INIT:PAPI_L1_LDM_SET handle: %d\n",(exp).PAPI_L1_LDM_SET); */
				
#define PAPI_L1_LDM_TMPS  int PAPI_L1_LDM_SET, \
                             PAPI_L1_LDM_MASK; \
                         long long PAPI_L1_LDM_VALUE
												 
#define PAPI_L1_LDM_DECL  long long PAPI_L1_LDM_VAR

#define PAPI_L1_LDM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_LDM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_LDM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_LDM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_LDM_SET,&(exp).PAPI_L1_LDM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_LDM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_LDM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_LDM_VAR = (exp1).PAPI_L1_LDM_VALUE

#define PAPI_L1_LDM_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_LDM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_LDM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_LDM")
#define PAPI_L1_LDM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_LDM_VAR); 


#define PAPI_L1_LDM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_LDM_SET,(exp).PAPI_L1_LDM_MASK)


/*
 * PAPI_L1_STM DEFINITIONS 
 */
#define PAPI_L1_STM_INIT(exp) \
	 (exp).PAPI_L1_STM_MASK = PAPI_L1_STM; \
   (exp).PAPI_L1_STM_SET = add_test_event((exp).PAPI_L1_STM_MASK) 
	 /* ; printf("INIT:PAPI_L1_STM_SET handle: %d\n",(exp).PAPI_L1_STM_SET); */
				
#define PAPI_L1_STM_TMPS  int PAPI_L1_STM_SET, \
                             PAPI_L1_STM_MASK; \
                         long long PAPI_L1_STM_VALUE
												 
#define PAPI_L1_STM_DECL  long long PAPI_L1_STM_VAR

#define PAPI_L1_STM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_STM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_STM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_STM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_STM_SET,&(exp).PAPI_L1_STM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_STM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_STM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_STM_VAR = (exp1).PAPI_L1_STM_VALUE

#define PAPI_L1_STM_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_STM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_STM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_STM")
#define PAPI_L1_STM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_STM_VAR); 


#define PAPI_L1_STM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_STM_SET,(exp).PAPI_L1_STM_MASK)


/*
 * PAPI_L2_LDM DEFINITIONS 
 */
#define PAPI_L2_LDM_INIT(exp) \
	 (exp).PAPI_L2_LDM_MASK = PAPI_L2_LDM; \
   (exp).PAPI_L2_LDM_SET = add_test_event((exp).PAPI_L2_LDM_MASK) 
	 /* ; printf("INIT:PAPI_L2_LDM_SET handle: %d\n",(exp).PAPI_L2_LDM_SET); */
				
#define PAPI_L2_LDM_TMPS  int PAPI_L2_LDM_SET, \
                             PAPI_L2_LDM_MASK; \
                         long long PAPI_L2_LDM_VALUE
												 
#define PAPI_L2_LDM_DECL  long long PAPI_L2_LDM_VAR

#define PAPI_L2_LDM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_LDM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_LDM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_LDM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_LDM_SET,&(exp).PAPI_L2_LDM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_LDM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_LDM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_LDM_VAR = (exp1).PAPI_L2_LDM_VALUE

#define PAPI_L2_LDM_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_LDM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_LDM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_LDM")
#define PAPI_L2_LDM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_LDM_VAR); 


#define PAPI_L2_LDM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_LDM_SET,(exp).PAPI_L2_LDM_MASK)


/*
 * PAPI_L2_STM DEFINITIONS 
 */
#define PAPI_L2_STM_INIT(exp) \
	 (exp).PAPI_L2_STM_MASK = PAPI_L2_STM; \
   (exp).PAPI_L2_STM_SET = add_test_event((exp).PAPI_L2_STM_MASK) 
	 /* ; printf("INIT:PAPI_L2_STM_SET handle: %d\n",(exp).PAPI_L2_STM_SET); */
				
#define PAPI_L2_STM_TMPS  int PAPI_L2_STM_SET, \
                             PAPI_L2_STM_MASK; \
                         long long PAPI_L2_STM_VALUE
												 
#define PAPI_L2_STM_DECL  long long PAPI_L2_STM_VAR

#define PAPI_L2_STM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_STM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_STM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_STM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_STM_SET,&(exp).PAPI_L2_STM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_STM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_STM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_STM_VAR = (exp1).PAPI_L2_STM_VALUE

#define PAPI_L2_STM_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_STM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_STM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_STM")
#define PAPI_L2_STM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_STM_VAR); 


#define PAPI_L2_STM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_STM_SET,(exp).PAPI_L2_STM_MASK)


/*
 * PAPI_BTAC_M DEFINITIONS 
 */
#define PAPI_BTAC_M_INIT(exp) \
	 (exp).PAPI_BTAC_M_MASK = PAPI_BTAC_M; \
   (exp).PAPI_BTAC_M_SET = add_test_event((exp).PAPI_BTAC_M_MASK) 
	 /* ; printf("INIT:PAPI_BTAC_M_SET handle: %d\n",(exp).PAPI_BTAC_M_SET); */
				
#define PAPI_BTAC_M_TMPS  int PAPI_BTAC_M_SET, \
                             PAPI_BTAC_M_MASK; \
                         long long PAPI_BTAC_M_VALUE
												 
#define PAPI_BTAC_M_DECL  long long PAPI_BTAC_M_VAR

#define PAPI_BTAC_M_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BTAC_M_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BTAC_M", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BTAC_M_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BTAC_M_SET,&(exp).PAPI_BTAC_M_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BTAC_M", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BTAC_M_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BTAC_M_VAR = (exp1).PAPI_BTAC_M_VALUE

#define PAPI_BTAC_M_SAVE_INSTANCE(exp,inst) \
        PAPI_BTAC_M_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BTAC_M_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BTAC_M")
#define PAPI_BTAC_M_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BTAC_M_VAR); 


#define PAPI_BTAC_M_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BTAC_M_SET,(exp).PAPI_BTAC_M_MASK)


/*
 * PAPI_PRF_DM DEFINITIONS 
 */
#define PAPI_PRF_DM_INIT(exp) \
	 (exp).PAPI_PRF_DM_MASK = PAPI_PRF_DM; \
   (exp).PAPI_PRF_DM_SET = add_test_event((exp).PAPI_PRF_DM_MASK) 
	 /* ; printf("INIT:PAPI_PRF_DM_SET handle: %d\n",(exp).PAPI_PRF_DM_SET); */
				
#define PAPI_PRF_DM_TMPS  int PAPI_PRF_DM_SET, \
                             PAPI_PRF_DM_MASK; \
                         long long PAPI_PRF_DM_VALUE
												 
#define PAPI_PRF_DM_DECL  long long PAPI_PRF_DM_VAR

#define PAPI_PRF_DM_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_PRF_DM_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "PRF_DM", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_PRF_DM_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_PRF_DM_SET,&(exp).PAPI_PRF_DM_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "PRF_DM", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_PRF_DM_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_PRF_DM_VAR = (exp1).PAPI_PRF_DM_VALUE

#define PAPI_PRF_DM_SAVE_INSTANCE(exp,inst) \
        PAPI_PRF_DM_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_PRF_DM_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_PRF_DM")
#define PAPI_PRF_DM_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_PRF_DM_VAR); 


#define PAPI_PRF_DM_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_PRF_DM_SET,(exp).PAPI_PRF_DM_MASK)


/*
 * PAPI_L3_DCH DEFINITIONS 
 */
#define PAPI_L3_DCH_INIT(exp) \
	 (exp).PAPI_L3_DCH_MASK = PAPI_L3_DCH; \
   (exp).PAPI_L3_DCH_SET = add_test_event((exp).PAPI_L3_DCH_MASK) 
	 /* ; printf("INIT:PAPI_L3_DCH_SET handle: %d\n",(exp).PAPI_L3_DCH_SET); */
				
#define PAPI_L3_DCH_TMPS  int PAPI_L3_DCH_SET, \
                             PAPI_L3_DCH_MASK; \
                         long long PAPI_L3_DCH_VALUE
												 
#define PAPI_L3_DCH_DECL  long long PAPI_L3_DCH_VAR

#define PAPI_L3_DCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_DCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_DCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_DCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_DCH_SET,&(exp).PAPI_L3_DCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_DCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_DCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_DCH_VAR = (exp1).PAPI_L3_DCH_VALUE

#define PAPI_L3_DCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_DCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_DCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_DCH")
#define PAPI_L3_DCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_DCH_VAR); 


#define PAPI_L3_DCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_DCH_SET,(exp).PAPI_L3_DCH_MASK)


/*
 * PAPI_TLB_SD DEFINITIONS 
 */
#define PAPI_TLB_SD_INIT(exp) \
	 (exp).PAPI_TLB_SD_MASK = PAPI_TLB_SD; \
   (exp).PAPI_TLB_SD_SET = add_test_event((exp).PAPI_TLB_SD_MASK) 
	 /* ; printf("INIT:PAPI_TLB_SD_SET handle: %d\n",(exp).PAPI_TLB_SD_SET); */
				
#define PAPI_TLB_SD_TMPS  int PAPI_TLB_SD_SET, \
                             PAPI_TLB_SD_MASK; \
                         long long PAPI_TLB_SD_VALUE
												 
#define PAPI_TLB_SD_DECL  long long PAPI_TLB_SD_VAR

#define PAPI_TLB_SD_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TLB_SD_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TLB_SD", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TLB_SD_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TLB_SD_SET,&(exp).PAPI_TLB_SD_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TLB_SD", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TLB_SD_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TLB_SD_VAR = (exp1).PAPI_TLB_SD_VALUE

#define PAPI_TLB_SD_SAVE_INSTANCE(exp,inst) \
        PAPI_TLB_SD_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TLB_SD_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TLB_SD")
#define PAPI_TLB_SD_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TLB_SD_VAR); 


#define PAPI_TLB_SD_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TLB_SD_SET,(exp).PAPI_TLB_SD_MASK)


/*
 * PAPI_CSR_FAL DEFINITIONS 
 */
#define PAPI_CSR_FAL_INIT(exp) \
	 (exp).PAPI_CSR_FAL_MASK = PAPI_CSR_FAL; \
   (exp).PAPI_CSR_FAL_SET = add_test_event((exp).PAPI_CSR_FAL_MASK) 
	 /* ; printf("INIT:PAPI_CSR_FAL_SET handle: %d\n",(exp).PAPI_CSR_FAL_SET); */
				
#define PAPI_CSR_FAL_TMPS  int PAPI_CSR_FAL_SET, \
                             PAPI_CSR_FAL_MASK; \
                         long long PAPI_CSR_FAL_VALUE
												 
#define PAPI_CSR_FAL_DECL  long long PAPI_CSR_FAL_VAR

#define PAPI_CSR_FAL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CSR_FAL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CSR_FAL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CSR_FAL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CSR_FAL_SET,&(exp).PAPI_CSR_FAL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CSR_FAL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CSR_FAL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CSR_FAL_VAR = (exp1).PAPI_CSR_FAL_VALUE

#define PAPI_CSR_FAL_SAVE_INSTANCE(exp,inst) \
        PAPI_CSR_FAL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CSR_FAL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CSR_FAL")
#define PAPI_CSR_FAL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CSR_FAL_VAR); 


#define PAPI_CSR_FAL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CSR_FAL_SET,(exp).PAPI_CSR_FAL_MASK)


/*
 * PAPI_CSR_SUC DEFINITIONS 
 */
#define PAPI_CSR_SUC_INIT(exp) \
	 (exp).PAPI_CSR_SUC_MASK = PAPI_CSR_SUC; \
   (exp).PAPI_CSR_SUC_SET = add_test_event((exp).PAPI_CSR_SUC_MASK) 
	 /* ; printf("INIT:PAPI_CSR_SUC_SET handle: %d\n",(exp).PAPI_CSR_SUC_SET); */
				
#define PAPI_CSR_SUC_TMPS  int PAPI_CSR_SUC_SET, \
                             PAPI_CSR_SUC_MASK; \
                         long long PAPI_CSR_SUC_VALUE
												 
#define PAPI_CSR_SUC_DECL  long long PAPI_CSR_SUC_VAR

#define PAPI_CSR_SUC_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CSR_SUC_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CSR_SUC", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CSR_SUC_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CSR_SUC_SET,&(exp).PAPI_CSR_SUC_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CSR_SUC", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CSR_SUC_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CSR_SUC_VAR = (exp1).PAPI_CSR_SUC_VALUE

#define PAPI_CSR_SUC_SAVE_INSTANCE(exp,inst) \
        PAPI_CSR_SUC_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CSR_SUC_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CSR_SUC")
#define PAPI_CSR_SUC_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CSR_SUC_VAR); 


#define PAPI_CSR_SUC_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CSR_SUC_SET,(exp).PAPI_CSR_SUC_MASK)


/*
 * PAPI_CSR_TOT DEFINITIONS 
 */
#define PAPI_CSR_TOT_INIT(exp) \
	 (exp).PAPI_CSR_TOT_MASK = PAPI_CSR_TOT; \
   (exp).PAPI_CSR_TOT_SET = add_test_event((exp).PAPI_CSR_TOT_MASK) 
	 /* ; printf("INIT:PAPI_CSR_TOT_SET handle: %d\n",(exp).PAPI_CSR_TOT_SET); */
				
#define PAPI_CSR_TOT_TMPS  int PAPI_CSR_TOT_SET, \
                             PAPI_CSR_TOT_MASK; \
                         long long PAPI_CSR_TOT_VALUE
												 
#define PAPI_CSR_TOT_DECL  long long PAPI_CSR_TOT_VAR

#define PAPI_CSR_TOT_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_CSR_TOT_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "CSR_TOT", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_CSR_TOT_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_CSR_TOT_SET,&(exp).PAPI_CSR_TOT_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "CSR_TOT", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_CSR_TOT_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_CSR_TOT_VAR = (exp1).PAPI_CSR_TOT_VALUE

#define PAPI_CSR_TOT_SAVE_INSTANCE(exp,inst) \
        PAPI_CSR_TOT_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_CSR_TOT_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_CSR_TOT")
#define PAPI_CSR_TOT_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_CSR_TOT_VAR); 


#define PAPI_CSR_TOT_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_CSR_TOT_SET,(exp).PAPI_CSR_TOT_MASK)


/*
 * PAPI_MEM_SCY DEFINITIONS 
 */
#define PAPI_MEM_SCY_INIT(exp) \
	 (exp).PAPI_MEM_SCY_MASK = PAPI_MEM_SCY; \
   (exp).PAPI_MEM_SCY_SET = add_test_event((exp).PAPI_MEM_SCY_MASK) 
	 /* ; printf("INIT:PAPI_MEM_SCY_SET handle: %d\n",(exp).PAPI_MEM_SCY_SET); */
				
#define PAPI_MEM_SCY_TMPS  int PAPI_MEM_SCY_SET, \
                             PAPI_MEM_SCY_MASK; \
                         long long PAPI_MEM_SCY_VALUE
												 
#define PAPI_MEM_SCY_DECL  long long PAPI_MEM_SCY_VAR

#define PAPI_MEM_SCY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_MEM_SCY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "MEM_SCY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_MEM_SCY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_MEM_SCY_SET,&(exp).PAPI_MEM_SCY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "MEM_SCY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_MEM_SCY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_MEM_SCY_VAR = (exp1).PAPI_MEM_SCY_VALUE

#define PAPI_MEM_SCY_SAVE_INSTANCE(exp,inst) \
        PAPI_MEM_SCY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_MEM_SCY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_MEM_SCY")
#define PAPI_MEM_SCY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_MEM_SCY_VAR); 


#define PAPI_MEM_SCY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_MEM_SCY_SET,(exp).PAPI_MEM_SCY_MASK)


/*
 * PAPI_MEM_RCY DEFINITIONS 
 */
#define PAPI_MEM_RCY_INIT(exp) \
	 (exp).PAPI_MEM_RCY_MASK = PAPI_MEM_RCY; \
   (exp).PAPI_MEM_RCY_SET = add_test_event((exp).PAPI_MEM_RCY_MASK) 
	 /* ; printf("INIT:PAPI_MEM_RCY_SET handle: %d\n",(exp).PAPI_MEM_RCY_SET); */
				
#define PAPI_MEM_RCY_TMPS  int PAPI_MEM_RCY_SET, \
                             PAPI_MEM_RCY_MASK; \
                         long long PAPI_MEM_RCY_VALUE
												 
#define PAPI_MEM_RCY_DECL  long long PAPI_MEM_RCY_VAR

#define PAPI_MEM_RCY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_MEM_RCY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "MEM_RCY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_MEM_RCY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_MEM_RCY_SET,&(exp).PAPI_MEM_RCY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "MEM_RCY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_MEM_RCY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_MEM_RCY_VAR = (exp1).PAPI_MEM_RCY_VALUE

#define PAPI_MEM_RCY_SAVE_INSTANCE(exp,inst) \
        PAPI_MEM_RCY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_MEM_RCY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_MEM_RCY")
#define PAPI_MEM_RCY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_MEM_RCY_VAR); 


#define PAPI_MEM_RCY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_MEM_RCY_SET,(exp).PAPI_MEM_RCY_MASK)


/*
 * PAPI_MEM_WCY DEFINITIONS 
 */
#define PAPI_MEM_WCY_INIT(exp) \
	 (exp).PAPI_MEM_WCY_MASK = PAPI_MEM_WCY; \
   (exp).PAPI_MEM_WCY_SET = add_test_event((exp).PAPI_MEM_WCY_MASK) 
	 /* ; printf("INIT:PAPI_MEM_WCY_SET handle: %d\n",(exp).PAPI_MEM_WCY_SET); */
				
#define PAPI_MEM_WCY_TMPS  int PAPI_MEM_WCY_SET, \
                             PAPI_MEM_WCY_MASK; \
                         long long PAPI_MEM_WCY_VALUE
												 
#define PAPI_MEM_WCY_DECL  long long PAPI_MEM_WCY_VAR

#define PAPI_MEM_WCY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_MEM_WCY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "MEM_WCY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_MEM_WCY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_MEM_WCY_SET,&(exp).PAPI_MEM_WCY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "MEM_WCY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_MEM_WCY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_MEM_WCY_VAR = (exp1).PAPI_MEM_WCY_VALUE

#define PAPI_MEM_WCY_SAVE_INSTANCE(exp,inst) \
        PAPI_MEM_WCY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_MEM_WCY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_MEM_WCY")
#define PAPI_MEM_WCY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_MEM_WCY_VAR); 


#define PAPI_MEM_WCY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_MEM_WCY_SET,(exp).PAPI_MEM_WCY_MASK)


/*
 * PAPI_STL_ICY DEFINITIONS 
 */
#define PAPI_STL_ICY_INIT(exp) \
	 (exp).PAPI_STL_ICY_MASK = PAPI_STL_ICY; \
   (exp).PAPI_STL_ICY_SET = add_test_event((exp).PAPI_STL_ICY_MASK) 
	 /* ; printf("INIT:PAPI_STL_ICY_SET handle: %d\n",(exp).PAPI_STL_ICY_SET); */
				
#define PAPI_STL_ICY_TMPS  int PAPI_STL_ICY_SET, \
                             PAPI_STL_ICY_MASK; \
                         long long PAPI_STL_ICY_VALUE
												 
#define PAPI_STL_ICY_DECL  long long PAPI_STL_ICY_VAR

#define PAPI_STL_ICY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_STL_ICY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "STL_ICY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_STL_ICY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_STL_ICY_SET,&(exp).PAPI_STL_ICY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "STL_ICY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_STL_ICY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_STL_ICY_VAR = (exp1).PAPI_STL_ICY_VALUE

#define PAPI_STL_ICY_SAVE_INSTANCE(exp,inst) \
        PAPI_STL_ICY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_STL_ICY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_STL_ICY")
#define PAPI_STL_ICY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_STL_ICY_VAR); 


#define PAPI_STL_ICY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_STL_ICY_SET,(exp).PAPI_STL_ICY_MASK)


/*
 * PAPI_FUL_ICY DEFINITIONS 
 */
#define PAPI_FUL_ICY_INIT(exp) \
	 (exp).PAPI_FUL_ICY_MASK = PAPI_FUL_ICY; \
   (exp).PAPI_FUL_ICY_SET = add_test_event((exp).PAPI_FUL_ICY_MASK) 
	 /* ; printf("INIT:PAPI_FUL_ICY_SET handle: %d\n",(exp).PAPI_FUL_ICY_SET); */
				
#define PAPI_FUL_ICY_TMPS  int PAPI_FUL_ICY_SET, \
                             PAPI_FUL_ICY_MASK; \
                         long long PAPI_FUL_ICY_VALUE
												 
#define PAPI_FUL_ICY_DECL  long long PAPI_FUL_ICY_VAR

#define PAPI_FUL_ICY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FUL_ICY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FUL_ICY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FUL_ICY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FUL_ICY_SET,&(exp).PAPI_FUL_ICY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FUL_ICY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FUL_ICY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FUL_ICY_VAR = (exp1).PAPI_FUL_ICY_VALUE

#define PAPI_FUL_ICY_SAVE_INSTANCE(exp,inst) \
        PAPI_FUL_ICY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FUL_ICY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FUL_ICY")
#define PAPI_FUL_ICY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FUL_ICY_VAR); 


#define PAPI_FUL_ICY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FUL_ICY_SET,(exp).PAPI_FUL_ICY_MASK)


/*
 * PAPI_STL_CCY DEFINITIONS 
 */
#define PAPI_STL_CCY_INIT(exp) \
	 (exp).PAPI_STL_CCY_MASK = PAPI_STL_CCY; \
   (exp).PAPI_STL_CCY_SET = add_test_event((exp).PAPI_STL_CCY_MASK) 
	 /* ; printf("INIT:PAPI_STL_CCY_SET handle: %d\n",(exp).PAPI_STL_CCY_SET); */
				
#define PAPI_STL_CCY_TMPS  int PAPI_STL_CCY_SET, \
                             PAPI_STL_CCY_MASK; \
                         long long PAPI_STL_CCY_VALUE
												 
#define PAPI_STL_CCY_DECL  long long PAPI_STL_CCY_VAR

#define PAPI_STL_CCY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_STL_CCY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "STL_CCY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_STL_CCY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_STL_CCY_SET,&(exp).PAPI_STL_CCY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "STL_CCY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_STL_CCY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_STL_CCY_VAR = (exp1).PAPI_STL_CCY_VALUE

#define PAPI_STL_CCY_SAVE_INSTANCE(exp,inst) \
        PAPI_STL_CCY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_STL_CCY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_STL_CCY")
#define PAPI_STL_CCY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_STL_CCY_VAR); 


#define PAPI_STL_CCY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_STL_CCY_SET,(exp).PAPI_STL_CCY_MASK)


/*
 * PAPI_FUL_CCY DEFINITIONS 
 */
#define PAPI_FUL_CCY_INIT(exp) \
	 (exp).PAPI_FUL_CCY_MASK = PAPI_FUL_CCY; \
   (exp).PAPI_FUL_CCY_SET = add_test_event((exp).PAPI_FUL_CCY_MASK) 
	 /* ; printf("INIT:PAPI_FUL_CCY_SET handle: %d\n",(exp).PAPI_FUL_CCY_SET); */
				
#define PAPI_FUL_CCY_TMPS  int PAPI_FUL_CCY_SET, \
                             PAPI_FUL_CCY_MASK; \
                         long long PAPI_FUL_CCY_VALUE
												 
#define PAPI_FUL_CCY_DECL  long long PAPI_FUL_CCY_VAR

#define PAPI_FUL_CCY_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FUL_CCY_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FUL_CCY", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FUL_CCY_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FUL_CCY_SET,&(exp).PAPI_FUL_CCY_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FUL_CCY", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FUL_CCY_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FUL_CCY_VAR = (exp1).PAPI_FUL_CCY_VALUE

#define PAPI_FUL_CCY_SAVE_INSTANCE(exp,inst) \
        PAPI_FUL_CCY_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FUL_CCY_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FUL_CCY")
#define PAPI_FUL_CCY_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FUL_CCY_VAR); 


#define PAPI_FUL_CCY_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FUL_CCY_SET,(exp).PAPI_FUL_CCY_MASK)


/*
 * PAPI_HW_INT DEFINITIONS 
 */
#define PAPI_HW_INT_INIT(exp) \
	 (exp).PAPI_HW_INT_MASK = PAPI_HW_INT; \
   (exp).PAPI_HW_INT_SET = add_test_event((exp).PAPI_HW_INT_MASK) 
	 /* ; printf("INIT:PAPI_HW_INT_SET handle: %d\n",(exp).PAPI_HW_INT_SET); */
				
#define PAPI_HW_INT_TMPS  int PAPI_HW_INT_SET, \
                             PAPI_HW_INT_MASK; \
                         long long PAPI_HW_INT_VALUE
												 
#define PAPI_HW_INT_DECL  long long PAPI_HW_INT_VAR

#define PAPI_HW_INT_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_HW_INT_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "HW_INT", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_HW_INT_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_HW_INT_SET,&(exp).PAPI_HW_INT_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "HW_INT", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_HW_INT_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_HW_INT_VAR = (exp1).PAPI_HW_INT_VALUE

#define PAPI_HW_INT_SAVE_INSTANCE(exp,inst) \
        PAPI_HW_INT_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_HW_INT_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_HW_INT")
#define PAPI_HW_INT_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_HW_INT_VAR); 


#define PAPI_HW_INT_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_HW_INT_SET,(exp).PAPI_HW_INT_MASK)


/*
 * PAPI_BR_UCN DEFINITIONS 
 */
#define PAPI_BR_UCN_INIT(exp) \
	 (exp).PAPI_BR_UCN_MASK = PAPI_BR_UCN; \
   (exp).PAPI_BR_UCN_SET = add_test_event((exp).PAPI_BR_UCN_MASK) 
	 /* ; printf("INIT:PAPI_BR_UCN_SET handle: %d\n",(exp).PAPI_BR_UCN_SET); */
				
#define PAPI_BR_UCN_TMPS  int PAPI_BR_UCN_SET, \
                             PAPI_BR_UCN_MASK; \
                         long long PAPI_BR_UCN_VALUE
												 
#define PAPI_BR_UCN_DECL  long long PAPI_BR_UCN_VAR

#define PAPI_BR_UCN_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_UCN_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_UCN", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_UCN_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_UCN_SET,&(exp).PAPI_BR_UCN_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_UCN", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_UCN_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_UCN_VAR = (exp1).PAPI_BR_UCN_VALUE

#define PAPI_BR_UCN_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_UCN_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_UCN_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_UCN")
#define PAPI_BR_UCN_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_UCN_VAR); 


#define PAPI_BR_UCN_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_UCN_SET,(exp).PAPI_BR_UCN_MASK)


/*
 * PAPI_BR_CN DEFINITIONS 
 */
#define PAPI_BR_CN_INIT(exp) \
	 (exp).PAPI_BR_CN_MASK = PAPI_BR_CN; \
   (exp).PAPI_BR_CN_SET = add_test_event((exp).PAPI_BR_CN_MASK) 
	 /* ; printf("INIT:PAPI_BR_CN_SET handle: %d\n",(exp).PAPI_BR_CN_SET); */
				
#define PAPI_BR_CN_TMPS  int PAPI_BR_CN_SET, \
                             PAPI_BR_CN_MASK; \
                         long long PAPI_BR_CN_VALUE
												 
#define PAPI_BR_CN_DECL  long long PAPI_BR_CN_VAR

#define PAPI_BR_CN_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_CN_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_CN", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_CN_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_CN_SET,&(exp).PAPI_BR_CN_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_CN", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_CN_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_CN_VAR = (exp1).PAPI_BR_CN_VALUE

#define PAPI_BR_CN_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_CN_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_CN_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_CN")
#define PAPI_BR_CN_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_CN_VAR); 


#define PAPI_BR_CN_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_CN_SET,(exp).PAPI_BR_CN_MASK)


/*
 * PAPI_BR_TKN DEFINITIONS 
 */
#define PAPI_BR_TKN_INIT(exp) \
	 (exp).PAPI_BR_TKN_MASK = PAPI_BR_TKN; \
   (exp).PAPI_BR_TKN_SET = add_test_event((exp).PAPI_BR_TKN_MASK) 
	 /* ; printf("INIT:PAPI_BR_TKN_SET handle: %d\n",(exp).PAPI_BR_TKN_SET); */
				
#define PAPI_BR_TKN_TMPS  int PAPI_BR_TKN_SET, \
                             PAPI_BR_TKN_MASK; \
                         long long PAPI_BR_TKN_VALUE
												 
#define PAPI_BR_TKN_DECL  long long PAPI_BR_TKN_VAR

#define PAPI_BR_TKN_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_TKN_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_TKN", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_TKN_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_TKN_SET,&(exp).PAPI_BR_TKN_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_TKN", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_TKN_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_TKN_VAR = (exp1).PAPI_BR_TKN_VALUE

#define PAPI_BR_TKN_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_TKN_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_TKN_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_TKN")
#define PAPI_BR_TKN_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_TKN_VAR); 


#define PAPI_BR_TKN_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_TKN_SET,(exp).PAPI_BR_TKN_MASK)


/*
 * PAPI_BR_NTK DEFINITIONS 
 */
#define PAPI_BR_NTK_INIT(exp) \
	 (exp).PAPI_BR_NTK_MASK = PAPI_BR_NTK; \
   (exp).PAPI_BR_NTK_SET = add_test_event((exp).PAPI_BR_NTK_MASK) 
	 /* ; printf("INIT:PAPI_BR_NTK_SET handle: %d\n",(exp).PAPI_BR_NTK_SET); */
				
#define PAPI_BR_NTK_TMPS  int PAPI_BR_NTK_SET, \
                             PAPI_BR_NTK_MASK; \
                         long long PAPI_BR_NTK_VALUE
												 
#define PAPI_BR_NTK_DECL  long long PAPI_BR_NTK_VAR

#define PAPI_BR_NTK_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_NTK_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_NTK", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_NTK_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_NTK_SET,&(exp).PAPI_BR_NTK_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_NTK", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_NTK_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_NTK_VAR = (exp1).PAPI_BR_NTK_VALUE

#define PAPI_BR_NTK_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_NTK_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_NTK_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_NTK")
#define PAPI_BR_NTK_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_NTK_VAR); 


#define PAPI_BR_NTK_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_NTK_SET,(exp).PAPI_BR_NTK_MASK)


/*
 * PAPI_BR_MSP DEFINITIONS 
 */
#define PAPI_BR_MSP_INIT(exp) \
	 (exp).PAPI_BR_MSP_MASK = PAPI_BR_MSP; \
   (exp).PAPI_BR_MSP_SET = add_test_event((exp).PAPI_BR_MSP_MASK) 
	 /* ; printf("INIT:PAPI_BR_MSP_SET handle: %d\n",(exp).PAPI_BR_MSP_SET); */
				
#define PAPI_BR_MSP_TMPS  int PAPI_BR_MSP_SET, \
                             PAPI_BR_MSP_MASK; \
                         long long PAPI_BR_MSP_VALUE
												 
#define PAPI_BR_MSP_DECL  long long PAPI_BR_MSP_VAR

#define PAPI_BR_MSP_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_MSP_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_MSP", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_MSP_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_MSP_SET,&(exp).PAPI_BR_MSP_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_MSP", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_MSP_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_MSP_VAR = (exp1).PAPI_BR_MSP_VALUE

#define PAPI_BR_MSP_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_MSP_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_MSP_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_MSP")
#define PAPI_BR_MSP_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_MSP_VAR); 


#define PAPI_BR_MSP_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_MSP_SET,(exp).PAPI_BR_MSP_MASK)


/*
 * PAPI_BR_PRC DEFINITIONS 
 */
#define PAPI_BR_PRC_INIT(exp) \
	 (exp).PAPI_BR_PRC_MASK = PAPI_BR_PRC; \
   (exp).PAPI_BR_PRC_SET = add_test_event((exp).PAPI_BR_PRC_MASK) 
	 /* ; printf("INIT:PAPI_BR_PRC_SET handle: %d\n",(exp).PAPI_BR_PRC_SET); */
				
#define PAPI_BR_PRC_TMPS  int PAPI_BR_PRC_SET, \
                             PAPI_BR_PRC_MASK; \
                         long long PAPI_BR_PRC_VALUE
												 
#define PAPI_BR_PRC_DECL  long long PAPI_BR_PRC_VAR

#define PAPI_BR_PRC_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_PRC_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_PRC", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_PRC_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_PRC_SET,&(exp).PAPI_BR_PRC_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_PRC", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_PRC_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_PRC_VAR = (exp1).PAPI_BR_PRC_VALUE

#define PAPI_BR_PRC_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_PRC_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_PRC_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_PRC")
#define PAPI_BR_PRC_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_PRC_VAR); 


#define PAPI_BR_PRC_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_PRC_SET,(exp).PAPI_BR_PRC_MASK)


/*
 * PAPI_FMA_INS DEFINITIONS 
 */
#define PAPI_FMA_INS_INIT(exp) \
	 (exp).PAPI_FMA_INS_MASK = PAPI_FMA_INS; \
   (exp).PAPI_FMA_INS_SET = add_test_event((exp).PAPI_FMA_INS_MASK) 
	 /* ; printf("INIT:PAPI_FMA_INS_SET handle: %d\n",(exp).PAPI_FMA_INS_SET); */
				
#define PAPI_FMA_INS_TMPS  int PAPI_FMA_INS_SET, \
                             PAPI_FMA_INS_MASK; \
                         long long PAPI_FMA_INS_VALUE
												 
#define PAPI_FMA_INS_DECL  long long PAPI_FMA_INS_VAR

#define PAPI_FMA_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FMA_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FMA_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FMA_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FMA_INS_SET,&(exp).PAPI_FMA_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FMA_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FMA_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FMA_INS_VAR = (exp1).PAPI_FMA_INS_VALUE

#define PAPI_FMA_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FMA_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FMA_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FMA_INS")
#define PAPI_FMA_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FMA_INS_VAR); 


#define PAPI_FMA_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FMA_INS_SET,(exp).PAPI_FMA_INS_MASK)


/*
 * PAPI_TOT_IIS DEFINITIONS 
 */
#define PAPI_TOT_IIS_INIT(exp) \
	 (exp).PAPI_TOT_IIS_MASK = PAPI_TOT_IIS; \
   (exp).PAPI_TOT_IIS_SET = add_test_event((exp).PAPI_TOT_IIS_MASK) 
	 /* ; printf("INIT:PAPI_TOT_IIS_SET handle: %d\n",(exp).PAPI_TOT_IIS_SET); */
				
#define PAPI_TOT_IIS_TMPS  int PAPI_TOT_IIS_SET, \
                             PAPI_TOT_IIS_MASK; \
                         long long PAPI_TOT_IIS_VALUE
												 
#define PAPI_TOT_IIS_DECL  long long PAPI_TOT_IIS_VAR

#define PAPI_TOT_IIS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TOT_IIS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TOT_IIS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TOT_IIS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TOT_IIS_SET,&(exp).PAPI_TOT_IIS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TOT_IIS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TOT_IIS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TOT_IIS_VAR = (exp1).PAPI_TOT_IIS_VALUE

#define PAPI_TOT_IIS_SAVE_INSTANCE(exp,inst) \
        PAPI_TOT_IIS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TOT_IIS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TOT_IIS")
#define PAPI_TOT_IIS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TOT_IIS_VAR); 


#define PAPI_TOT_IIS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TOT_IIS_SET,(exp).PAPI_TOT_IIS_MASK)


/*
 * PAPI_TOT_INS DEFINITIONS 
 */
#define PAPI_TOT_INS_INIT(exp) \
	 (exp).PAPI_TOT_INS_MASK = PAPI_TOT_INS; \
   (exp).PAPI_TOT_INS_SET = add_test_event((exp).PAPI_TOT_INS_MASK) 
	 /* ; printf("INIT:PAPI_TOT_INS_SET handle: %d\n",(exp).PAPI_TOT_INS_SET); */
				
#define PAPI_TOT_INS_TMPS  int PAPI_TOT_INS_SET, \
                             PAPI_TOT_INS_MASK; \
                         long long PAPI_TOT_INS_VALUE
												 
#define PAPI_TOT_INS_DECL  long long PAPI_TOT_INS_VAR

#define PAPI_TOT_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TOT_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TOT_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TOT_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TOT_INS_SET,&(exp).PAPI_TOT_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TOT_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TOT_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TOT_INS_VAR = (exp1).PAPI_TOT_INS_VALUE

#define PAPI_TOT_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_TOT_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TOT_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TOT_INS")
#define PAPI_TOT_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TOT_INS_VAR); 


#define PAPI_TOT_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TOT_INS_SET,(exp).PAPI_TOT_INS_MASK)


/*
 * PAPI_INT_INS DEFINITIONS 
 */
#define PAPI_INT_INS_INIT(exp) \
	 (exp).PAPI_INT_INS_MASK = PAPI_INT_INS; \
   (exp).PAPI_INT_INS_SET = add_test_event((exp).PAPI_INT_INS_MASK) 
	 /* ; printf("INIT:PAPI_INT_INS_SET handle: %d\n",(exp).PAPI_INT_INS_SET); */
				
#define PAPI_INT_INS_TMPS  int PAPI_INT_INS_SET, \
                             PAPI_INT_INS_MASK; \
                         long long PAPI_INT_INS_VALUE
												 
#define PAPI_INT_INS_DECL  long long PAPI_INT_INS_VAR

#define PAPI_INT_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_INT_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "INT_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_INT_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_INT_INS_SET,&(exp).PAPI_INT_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "INT_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_INT_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_INT_INS_VAR = (exp1).PAPI_INT_INS_VALUE

#define PAPI_INT_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_INT_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_INT_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_INT_INS")
#define PAPI_INT_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_INT_INS_VAR); 


#define PAPI_INT_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_INT_INS_SET,(exp).PAPI_INT_INS_MASK)


/*
 * PAPI_FP_INS DEFINITIONS 
 */
#define PAPI_FP_INS_INIT(exp) \
	 (exp).PAPI_FP_INS_MASK = PAPI_FP_INS; \
   (exp).PAPI_FP_INS_SET = add_test_event((exp).PAPI_FP_INS_MASK) 
	 /* ; printf("INIT:PAPI_FP_INS_SET handle: %d\n",(exp).PAPI_FP_INS_SET); */
				
#define PAPI_FP_INS_TMPS  int PAPI_FP_INS_SET, \
                             PAPI_FP_INS_MASK; \
                         long long PAPI_FP_INS_VALUE
												 
#define PAPI_FP_INS_DECL  long long PAPI_FP_INS_VAR

#define PAPI_FP_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FP_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FP_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FP_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FP_INS_SET,&(exp).PAPI_FP_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FP_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FP_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FP_INS_VAR = (exp1).PAPI_FP_INS_VALUE

#define PAPI_FP_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FP_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FP_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FP_INS")
#define PAPI_FP_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FP_INS_VAR); 


#define PAPI_FP_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FP_INS_SET,(exp).PAPI_FP_INS_MASK)


/*
 * PAPI_LD_INS DEFINITIONS 
 */
#define PAPI_LD_INS_INIT(exp) \
	 (exp).PAPI_LD_INS_MASK = PAPI_LD_INS; \
   (exp).PAPI_LD_INS_SET = add_test_event((exp).PAPI_LD_INS_MASK) 
	 /* ; printf("INIT:PAPI_LD_INS_SET handle: %d\n",(exp).PAPI_LD_INS_SET); */
				
#define PAPI_LD_INS_TMPS  int PAPI_LD_INS_SET, \
                             PAPI_LD_INS_MASK; \
                         long long PAPI_LD_INS_VALUE
												 
#define PAPI_LD_INS_DECL  long long PAPI_LD_INS_VAR

#define PAPI_LD_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_LD_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "LD_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_LD_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_LD_INS_SET,&(exp).PAPI_LD_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "LD_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_LD_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_LD_INS_VAR = (exp1).PAPI_LD_INS_VALUE

#define PAPI_LD_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_LD_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_LD_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_LD_INS")
#define PAPI_LD_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_LD_INS_VAR); 


#define PAPI_LD_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_LD_INS_SET,(exp).PAPI_LD_INS_MASK)


/*
 * PAPI_SR_INS DEFINITIONS 
 */
#define PAPI_SR_INS_INIT(exp) \
	 (exp).PAPI_SR_INS_MASK = PAPI_SR_INS; \
   (exp).PAPI_SR_INS_SET = add_test_event((exp).PAPI_SR_INS_MASK) 
	 /* ; printf("INIT:PAPI_SR_INS_SET handle: %d\n",(exp).PAPI_SR_INS_SET); */
				
#define PAPI_SR_INS_TMPS  int PAPI_SR_INS_SET, \
                             PAPI_SR_INS_MASK; \
                         long long PAPI_SR_INS_VALUE
												 
#define PAPI_SR_INS_DECL  long long PAPI_SR_INS_VAR

#define PAPI_SR_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_SR_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "SR_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_SR_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_SR_INS_SET,&(exp).PAPI_SR_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "SR_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_SR_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_SR_INS_VAR = (exp1).PAPI_SR_INS_VALUE

#define PAPI_SR_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_SR_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_SR_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_SR_INS")
#define PAPI_SR_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_SR_INS_VAR); 


#define PAPI_SR_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_SR_INS_SET,(exp).PAPI_SR_INS_MASK)


/*
 * PAPI_BR_INS DEFINITIONS 
 */
#define PAPI_BR_INS_INIT(exp) \
	 (exp).PAPI_BR_INS_MASK = PAPI_BR_INS; \
   (exp).PAPI_BR_INS_SET = add_test_event((exp).PAPI_BR_INS_MASK) 
	 /* ; printf("INIT:PAPI_BR_INS_SET handle: %d\n",(exp).PAPI_BR_INS_SET); */
				
#define PAPI_BR_INS_TMPS  int PAPI_BR_INS_SET, \
                             PAPI_BR_INS_MASK; \
                         long long PAPI_BR_INS_VALUE
												 
#define PAPI_BR_INS_DECL  long long PAPI_BR_INS_VAR

#define PAPI_BR_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_BR_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "BR_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_BR_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_BR_INS_SET,&(exp).PAPI_BR_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "BR_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_BR_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_BR_INS_VAR = (exp1).PAPI_BR_INS_VALUE

#define PAPI_BR_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_BR_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_BR_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_BR_INS")
#define PAPI_BR_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_BR_INS_VAR); 


#define PAPI_BR_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_BR_INS_SET,(exp).PAPI_BR_INS_MASK)


/*
 * PAPI_VEC_INS DEFINITIONS 
 */
#define PAPI_VEC_INS_INIT(exp) \
	 (exp).PAPI_VEC_INS_MASK = PAPI_VEC_INS; \
   (exp).PAPI_VEC_INS_SET = add_test_event((exp).PAPI_VEC_INS_MASK) 
	 /* ; printf("INIT:PAPI_VEC_INS_SET handle: %d\n",(exp).PAPI_VEC_INS_SET); */
				
#define PAPI_VEC_INS_TMPS  int PAPI_VEC_INS_SET, \
                             PAPI_VEC_INS_MASK; \
                         long long PAPI_VEC_INS_VALUE
												 
#define PAPI_VEC_INS_DECL  long long PAPI_VEC_INS_VAR

#define PAPI_VEC_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_VEC_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "VEC_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_VEC_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_VEC_INS_SET,&(exp).PAPI_VEC_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "VEC_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_VEC_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_VEC_INS_VAR = (exp1).PAPI_VEC_INS_VALUE

#define PAPI_VEC_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_VEC_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_VEC_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_VEC_INS")
#define PAPI_VEC_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_VEC_INS_VAR); 


#define PAPI_VEC_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_VEC_INS_SET,(exp).PAPI_VEC_INS_MASK)


/*
 * PAPI_RES_STL DEFINITIONS 
 */
#define PAPI_RES_STL_INIT(exp) \
	 (exp).PAPI_RES_STL_MASK = PAPI_RES_STL; \
   (exp).PAPI_RES_STL_SET = add_test_event((exp).PAPI_RES_STL_MASK) 
	 /* ; printf("INIT:PAPI_RES_STL_SET handle: %d\n",(exp).PAPI_RES_STL_SET); */
				
#define PAPI_RES_STL_TMPS  int PAPI_RES_STL_SET, \
                             PAPI_RES_STL_MASK; \
                         long long PAPI_RES_STL_VALUE
												 
#define PAPI_RES_STL_DECL  long long PAPI_RES_STL_VAR

#define PAPI_RES_STL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_RES_STL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "RES_STL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_RES_STL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_RES_STL_SET,&(exp).PAPI_RES_STL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "RES_STL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_RES_STL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_RES_STL_VAR = (exp1).PAPI_RES_STL_VALUE

#define PAPI_RES_STL_SAVE_INSTANCE(exp,inst) \
        PAPI_RES_STL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_RES_STL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_RES_STL")
#define PAPI_RES_STL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_RES_STL_VAR); 


#define PAPI_RES_STL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_RES_STL_SET,(exp).PAPI_RES_STL_MASK)


/*
 * PAPI_FP_STAL DEFINITIONS 
 */
#define PAPI_FP_STAL_INIT(exp) \
	 (exp).PAPI_FP_STAL_MASK = PAPI_FP_STAL; \
   (exp).PAPI_FP_STAL_SET = add_test_event((exp).PAPI_FP_STAL_MASK) 
	 /* ; printf("INIT:PAPI_FP_STAL_SET handle: %d\n",(exp).PAPI_FP_STAL_SET); */
				
#define PAPI_FP_STAL_TMPS  int PAPI_FP_STAL_SET, \
                             PAPI_FP_STAL_MASK; \
                         long long PAPI_FP_STAL_VALUE
												 
#define PAPI_FP_STAL_DECL  long long PAPI_FP_STAL_VAR

#define PAPI_FP_STAL_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FP_STAL_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FP_STAL", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FP_STAL_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FP_STAL_SET,&(exp).PAPI_FP_STAL_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FP_STAL", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FP_STAL_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FP_STAL_VAR = (exp1).PAPI_FP_STAL_VALUE

#define PAPI_FP_STAL_SAVE_INSTANCE(exp,inst) \
        PAPI_FP_STAL_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FP_STAL_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FP_STAL")
#define PAPI_FP_STAL_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FP_STAL_VAR); 


#define PAPI_FP_STAL_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FP_STAL_SET,(exp).PAPI_FP_STAL_MASK)


/*
 * PAPI_TOT_CYC DEFINITIONS 
 */
#define PAPI_TOT_CYC_INIT(exp) \
	 (exp).PAPI_TOT_CYC_MASK = PAPI_TOT_CYC; \
   (exp).PAPI_TOT_CYC_SET = add_test_event((exp).PAPI_TOT_CYC_MASK) 
	 /* ; printf("INIT:PAPI_TOT_CYC_SET handle: %d\n",(exp).PAPI_TOT_CYC_SET); */
				
#define PAPI_TOT_CYC_TMPS  int PAPI_TOT_CYC_SET, \
                             PAPI_TOT_CYC_MASK; \
                         long long PAPI_TOT_CYC_VALUE
												 
#define PAPI_TOT_CYC_DECL  long long PAPI_TOT_CYC_VAR

#define PAPI_TOT_CYC_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_TOT_CYC_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "TOT_CYC", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_TOT_CYC_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_TOT_CYC_SET,&(exp).PAPI_TOT_CYC_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "TOT_CYC", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_TOT_CYC_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_TOT_CYC_VAR = (exp1).PAPI_TOT_CYC_VALUE

#define PAPI_TOT_CYC_SAVE_INSTANCE(exp,inst) \
        PAPI_TOT_CYC_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_TOT_CYC_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_TOT_CYC")
#define PAPI_TOT_CYC_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_TOT_CYC_VAR); 


#define PAPI_TOT_CYC_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_TOT_CYC_SET,(exp).PAPI_TOT_CYC_MASK)


/*
 * PAPI_LST_INS DEFINITIONS 
 */
#define PAPI_LST_INS_INIT(exp) \
	 (exp).PAPI_LST_INS_MASK = PAPI_LST_INS; \
   (exp).PAPI_LST_INS_SET = add_test_event((exp).PAPI_LST_INS_MASK) 
	 /* ; printf("INIT:PAPI_LST_INS_SET handle: %d\n",(exp).PAPI_LST_INS_SET); */
				
#define PAPI_LST_INS_TMPS  int PAPI_LST_INS_SET, \
                             PAPI_LST_INS_MASK; \
                         long long PAPI_LST_INS_VALUE
												 
#define PAPI_LST_INS_DECL  long long PAPI_LST_INS_VAR

#define PAPI_LST_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_LST_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "LST_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_LST_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_LST_INS_SET,&(exp).PAPI_LST_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "LST_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_LST_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_LST_INS_VAR = (exp1).PAPI_LST_INS_VALUE

#define PAPI_LST_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_LST_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_LST_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_LST_INS")
#define PAPI_LST_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_LST_INS_VAR); 


#define PAPI_LST_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_LST_INS_SET,(exp).PAPI_LST_INS_MASK)


/*
 * PAPI_SYC_INS DEFINITIONS 
 */
#define PAPI_SYC_INS_INIT(exp) \
	 (exp).PAPI_SYC_INS_MASK = PAPI_SYC_INS; \
   (exp).PAPI_SYC_INS_SET = add_test_event((exp).PAPI_SYC_INS_MASK) 
	 /* ; printf("INIT:PAPI_SYC_INS_SET handle: %d\n",(exp).PAPI_SYC_INS_SET); */
				
#define PAPI_SYC_INS_TMPS  int PAPI_SYC_INS_SET, \
                             PAPI_SYC_INS_MASK; \
                         long long PAPI_SYC_INS_VALUE
												 
#define PAPI_SYC_INS_DECL  long long PAPI_SYC_INS_VAR

#define PAPI_SYC_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_SYC_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "SYC_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_SYC_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_SYC_INS_SET,&(exp).PAPI_SYC_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "SYC_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_SYC_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_SYC_INS_VAR = (exp1).PAPI_SYC_INS_VALUE

#define PAPI_SYC_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_SYC_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_SYC_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_SYC_INS")
#define PAPI_SYC_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_SYC_INS_VAR); 


#define PAPI_SYC_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_SYC_INS_SET,(exp).PAPI_SYC_INS_MASK)


/*
 * PAPI_L1_DCH DEFINITIONS 
 */
#define PAPI_L1_DCH_INIT(exp) \
	 (exp).PAPI_L1_DCH_MASK = PAPI_L1_DCH; \
   (exp).PAPI_L1_DCH_SET = add_test_event((exp).PAPI_L1_DCH_MASK) 
	 /* ; printf("INIT:PAPI_L1_DCH_SET handle: %d\n",(exp).PAPI_L1_DCH_SET); */
				
#define PAPI_L1_DCH_TMPS  int PAPI_L1_DCH_SET, \
                             PAPI_L1_DCH_MASK; \
                         long long PAPI_L1_DCH_VALUE
												 
#define PAPI_L1_DCH_DECL  long long PAPI_L1_DCH_VAR

#define PAPI_L1_DCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_DCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_DCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_DCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_DCH_SET,&(exp).PAPI_L1_DCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_DCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_DCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_DCH_VAR = (exp1).PAPI_L1_DCH_VALUE

#define PAPI_L1_DCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_DCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_DCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_DCH")
#define PAPI_L1_DCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_DCH_VAR); 


#define PAPI_L1_DCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_DCH_SET,(exp).PAPI_L1_DCH_MASK)


/*
 * PAPI_L2_DCH DEFINITIONS 
 */
#define PAPI_L2_DCH_INIT(exp) \
	 (exp).PAPI_L2_DCH_MASK = PAPI_L2_DCH; \
   (exp).PAPI_L2_DCH_SET = add_test_event((exp).PAPI_L2_DCH_MASK) 
	 /* ; printf("INIT:PAPI_L2_DCH_SET handle: %d\n",(exp).PAPI_L2_DCH_SET); */
				
#define PAPI_L2_DCH_TMPS  int PAPI_L2_DCH_SET, \
                             PAPI_L2_DCH_MASK; \
                         long long PAPI_L2_DCH_VALUE
												 
#define PAPI_L2_DCH_DECL  long long PAPI_L2_DCH_VAR

#define PAPI_L2_DCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_DCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_DCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_DCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_DCH_SET,&(exp).PAPI_L2_DCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_DCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_DCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_DCH_VAR = (exp1).PAPI_L2_DCH_VALUE

#define PAPI_L2_DCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_DCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_DCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_DCH")
#define PAPI_L2_DCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_DCH_VAR); 


#define PAPI_L2_DCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_DCH_SET,(exp).PAPI_L2_DCH_MASK)


/*
 * PAPI_L1_DCA DEFINITIONS 
 */
#define PAPI_L1_DCA_INIT(exp) \
	 (exp).PAPI_L1_DCA_MASK = PAPI_L1_DCA; \
   (exp).PAPI_L1_DCA_SET = add_test_event((exp).PAPI_L1_DCA_MASK) 
	 /* ; printf("INIT:PAPI_L1_DCA_SET handle: %d\n",(exp).PAPI_L1_DCA_SET); */
				
#define PAPI_L1_DCA_TMPS  int PAPI_L1_DCA_SET, \
                             PAPI_L1_DCA_MASK; \
                         long long PAPI_L1_DCA_VALUE
												 
#define PAPI_L1_DCA_DECL  long long PAPI_L1_DCA_VAR

#define PAPI_L1_DCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_DCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_DCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_DCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_DCA_SET,&(exp).PAPI_L1_DCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_DCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_DCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_DCA_VAR = (exp1).PAPI_L1_DCA_VALUE

#define PAPI_L1_DCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_DCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_DCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_DCA")
#define PAPI_L1_DCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_DCA_VAR); 


#define PAPI_L1_DCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_DCA_SET,(exp).PAPI_L1_DCA_MASK)


/*
 * PAPI_L2_DCA DEFINITIONS 
 */
#define PAPI_L2_DCA_INIT(exp) \
	 (exp).PAPI_L2_DCA_MASK = PAPI_L2_DCA; \
   (exp).PAPI_L2_DCA_SET = add_test_event((exp).PAPI_L2_DCA_MASK) 
	 /* ; printf("INIT:PAPI_L2_DCA_SET handle: %d\n",(exp).PAPI_L2_DCA_SET); */
				
#define PAPI_L2_DCA_TMPS  int PAPI_L2_DCA_SET, \
                             PAPI_L2_DCA_MASK; \
                         long long PAPI_L2_DCA_VALUE
												 
#define PAPI_L2_DCA_DECL  long long PAPI_L2_DCA_VAR

#define PAPI_L2_DCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_DCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_DCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_DCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_DCA_SET,&(exp).PAPI_L2_DCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_DCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_DCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_DCA_VAR = (exp1).PAPI_L2_DCA_VALUE

#define PAPI_L2_DCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_DCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_DCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_DCA")
#define PAPI_L2_DCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_DCA_VAR); 


#define PAPI_L2_DCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_DCA_SET,(exp).PAPI_L2_DCA_MASK)


/*
 * PAPI_L3_DCA DEFINITIONS 
 */
#define PAPI_L3_DCA_INIT(exp) \
	 (exp).PAPI_L3_DCA_MASK = PAPI_L3_DCA; \
   (exp).PAPI_L3_DCA_SET = add_test_event((exp).PAPI_L3_DCA_MASK) 
	 /* ; printf("INIT:PAPI_L3_DCA_SET handle: %d\n",(exp).PAPI_L3_DCA_SET); */
				
#define PAPI_L3_DCA_TMPS  int PAPI_L3_DCA_SET, \
                             PAPI_L3_DCA_MASK; \
                         long long PAPI_L3_DCA_VALUE
												 
#define PAPI_L3_DCA_DECL  long long PAPI_L3_DCA_VAR

#define PAPI_L3_DCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_DCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_DCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_DCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_DCA_SET,&(exp).PAPI_L3_DCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_DCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_DCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_DCA_VAR = (exp1).PAPI_L3_DCA_VALUE

#define PAPI_L3_DCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_DCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_DCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_DCA")
#define PAPI_L3_DCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_DCA_VAR); 


#define PAPI_L3_DCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_DCA_SET,(exp).PAPI_L3_DCA_MASK)


/*
 * PAPI_L1_DCR DEFINITIONS 
 */
#define PAPI_L1_DCR_INIT(exp) \
	 (exp).PAPI_L1_DCR_MASK = PAPI_L1_DCR; \
   (exp).PAPI_L1_DCR_SET = add_test_event((exp).PAPI_L1_DCR_MASK) 
	 /* ; printf("INIT:PAPI_L1_DCR_SET handle: %d\n",(exp).PAPI_L1_DCR_SET); */
				
#define PAPI_L1_DCR_TMPS  int PAPI_L1_DCR_SET, \
                             PAPI_L1_DCR_MASK; \
                         long long PAPI_L1_DCR_VALUE
												 
#define PAPI_L1_DCR_DECL  long long PAPI_L1_DCR_VAR

#define PAPI_L1_DCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_DCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_DCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_DCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_DCR_SET,&(exp).PAPI_L1_DCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_DCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_DCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_DCR_VAR = (exp1).PAPI_L1_DCR_VALUE

#define PAPI_L1_DCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_DCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_DCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_DCR")
#define PAPI_L1_DCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_DCR_VAR); 


#define PAPI_L1_DCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_DCR_SET,(exp).PAPI_L1_DCR_MASK)


/*
 * PAPI_L2_DCR DEFINITIONS 
 */
#define PAPI_L2_DCR_INIT(exp) \
	 (exp).PAPI_L2_DCR_MASK = PAPI_L2_DCR; \
   (exp).PAPI_L2_DCR_SET = add_test_event((exp).PAPI_L2_DCR_MASK) 
	 /* ; printf("INIT:PAPI_L2_DCR_SET handle: %d\n",(exp).PAPI_L2_DCR_SET); */
				
#define PAPI_L2_DCR_TMPS  int PAPI_L2_DCR_SET, \
                             PAPI_L2_DCR_MASK; \
                         long long PAPI_L2_DCR_VALUE
												 
#define PAPI_L2_DCR_DECL  long long PAPI_L2_DCR_VAR

#define PAPI_L2_DCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_DCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_DCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_DCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_DCR_SET,&(exp).PAPI_L2_DCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_DCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_DCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_DCR_VAR = (exp1).PAPI_L2_DCR_VALUE

#define PAPI_L2_DCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_DCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_DCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_DCR")
#define PAPI_L2_DCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_DCR_VAR); 


#define PAPI_L2_DCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_DCR_SET,(exp).PAPI_L2_DCR_MASK)


/*
 * PAPI_L3_DCR DEFINITIONS 
 */
#define PAPI_L3_DCR_INIT(exp) \
	 (exp).PAPI_L3_DCR_MASK = PAPI_L3_DCR; \
   (exp).PAPI_L3_DCR_SET = add_test_event((exp).PAPI_L3_DCR_MASK) 
	 /* ; printf("INIT:PAPI_L3_DCR_SET handle: %d\n",(exp).PAPI_L3_DCR_SET); */
				
#define PAPI_L3_DCR_TMPS  int PAPI_L3_DCR_SET, \
                             PAPI_L3_DCR_MASK; \
                         long long PAPI_L3_DCR_VALUE
												 
#define PAPI_L3_DCR_DECL  long long PAPI_L3_DCR_VAR

#define PAPI_L3_DCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_DCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_DCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_DCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_DCR_SET,&(exp).PAPI_L3_DCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_DCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_DCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_DCR_VAR = (exp1).PAPI_L3_DCR_VALUE

#define PAPI_L3_DCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_DCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_DCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_DCR")
#define PAPI_L3_DCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_DCR_VAR); 


#define PAPI_L3_DCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_DCR_SET,(exp).PAPI_L3_DCR_MASK)


/*
 * PAPI_L1_DCW DEFINITIONS 
 */
#define PAPI_L1_DCW_INIT(exp) \
	 (exp).PAPI_L1_DCW_MASK = PAPI_L1_DCW; \
   (exp).PAPI_L1_DCW_SET = add_test_event((exp).PAPI_L1_DCW_MASK) 
	 /* ; printf("INIT:PAPI_L1_DCW_SET handle: %d\n",(exp).PAPI_L1_DCW_SET); */
				
#define PAPI_L1_DCW_TMPS  int PAPI_L1_DCW_SET, \
                             PAPI_L1_DCW_MASK; \
                         long long PAPI_L1_DCW_VALUE
												 
#define PAPI_L1_DCW_DECL  long long PAPI_L1_DCW_VAR

#define PAPI_L1_DCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_DCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_DCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_DCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_DCW_SET,&(exp).PAPI_L1_DCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_DCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_DCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_DCW_VAR = (exp1).PAPI_L1_DCW_VALUE

#define PAPI_L1_DCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_DCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_DCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_DCW")
#define PAPI_L1_DCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_DCW_VAR); 


#define PAPI_L1_DCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_DCW_SET,(exp).PAPI_L1_DCW_MASK)


/*
 * PAPI_L2_DCW DEFINITIONS 
 */
#define PAPI_L2_DCW_INIT(exp) \
	 (exp).PAPI_L2_DCW_MASK = PAPI_L2_DCW; \
   (exp).PAPI_L2_DCW_SET = add_test_event((exp).PAPI_L2_DCW_MASK) 
	 /* ; printf("INIT:PAPI_L2_DCW_SET handle: %d\n",(exp).PAPI_L2_DCW_SET); */
				
#define PAPI_L2_DCW_TMPS  int PAPI_L2_DCW_SET, \
                             PAPI_L2_DCW_MASK; \
                         long long PAPI_L2_DCW_VALUE
												 
#define PAPI_L2_DCW_DECL  long long PAPI_L2_DCW_VAR

#define PAPI_L2_DCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_DCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_DCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_DCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_DCW_SET,&(exp).PAPI_L2_DCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_DCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_DCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_DCW_VAR = (exp1).PAPI_L2_DCW_VALUE

#define PAPI_L2_DCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_DCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_DCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_DCW")
#define PAPI_L2_DCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_DCW_VAR); 


#define PAPI_L2_DCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_DCW_SET,(exp).PAPI_L2_DCW_MASK)


/*
 * PAPI_L3_DCW DEFINITIONS 
 */
#define PAPI_L3_DCW_INIT(exp) \
	 (exp).PAPI_L3_DCW_MASK = PAPI_L3_DCW; \
   (exp).PAPI_L3_DCW_SET = add_test_event((exp).PAPI_L3_DCW_MASK) 
	 /* ; printf("INIT:PAPI_L3_DCW_SET handle: %d\n",(exp).PAPI_L3_DCW_SET); */
				
#define PAPI_L3_DCW_TMPS  int PAPI_L3_DCW_SET, \
                             PAPI_L3_DCW_MASK; \
                         long long PAPI_L3_DCW_VALUE
												 
#define PAPI_L3_DCW_DECL  long long PAPI_L3_DCW_VAR

#define PAPI_L3_DCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_DCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_DCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_DCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_DCW_SET,&(exp).PAPI_L3_DCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_DCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_DCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_DCW_VAR = (exp1).PAPI_L3_DCW_VALUE

#define PAPI_L3_DCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_DCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_DCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_DCW")
#define PAPI_L3_DCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_DCW_VAR); 


#define PAPI_L3_DCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_DCW_SET,(exp).PAPI_L3_DCW_MASK)


/*
 * PAPI_L1_ICH DEFINITIONS 
 */
#define PAPI_L1_ICH_INIT(exp) \
	 (exp).PAPI_L1_ICH_MASK = PAPI_L1_ICH; \
   (exp).PAPI_L1_ICH_SET = add_test_event((exp).PAPI_L1_ICH_MASK) 
	 /* ; printf("INIT:PAPI_L1_ICH_SET handle: %d\n",(exp).PAPI_L1_ICH_SET); */
				
#define PAPI_L1_ICH_TMPS  int PAPI_L1_ICH_SET, \
                             PAPI_L1_ICH_MASK; \
                         long long PAPI_L1_ICH_VALUE
												 
#define PAPI_L1_ICH_DECL  long long PAPI_L1_ICH_VAR

#define PAPI_L1_ICH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_ICH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_ICH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_ICH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_ICH_SET,&(exp).PAPI_L1_ICH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_ICH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_ICH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_ICH_VAR = (exp1).PAPI_L1_ICH_VALUE

#define PAPI_L1_ICH_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_ICH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_ICH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_ICH")
#define PAPI_L1_ICH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_ICH_VAR); 


#define PAPI_L1_ICH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_ICH_SET,(exp).PAPI_L1_ICH_MASK)


/*
 * PAPI_L2_ICH DEFINITIONS 
 */
#define PAPI_L2_ICH_INIT(exp) \
	 (exp).PAPI_L2_ICH_MASK = PAPI_L2_ICH; \
   (exp).PAPI_L2_ICH_SET = add_test_event((exp).PAPI_L2_ICH_MASK) 
	 /* ; printf("INIT:PAPI_L2_ICH_SET handle: %d\n",(exp).PAPI_L2_ICH_SET); */
				
#define PAPI_L2_ICH_TMPS  int PAPI_L2_ICH_SET, \
                             PAPI_L2_ICH_MASK; \
                         long long PAPI_L2_ICH_VALUE
												 
#define PAPI_L2_ICH_DECL  long long PAPI_L2_ICH_VAR

#define PAPI_L2_ICH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_ICH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_ICH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_ICH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_ICH_SET,&(exp).PAPI_L2_ICH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_ICH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_ICH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_ICH_VAR = (exp1).PAPI_L2_ICH_VALUE

#define PAPI_L2_ICH_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_ICH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_ICH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_ICH")
#define PAPI_L2_ICH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_ICH_VAR); 


#define PAPI_L2_ICH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_ICH_SET,(exp).PAPI_L2_ICH_MASK)


/*
 * PAPI_L3_ICH DEFINITIONS 
 */
#define PAPI_L3_ICH_INIT(exp) \
	 (exp).PAPI_L3_ICH_MASK = PAPI_L3_ICH; \
   (exp).PAPI_L3_ICH_SET = add_test_event((exp).PAPI_L3_ICH_MASK) 
	 /* ; printf("INIT:PAPI_L3_ICH_SET handle: %d\n",(exp).PAPI_L3_ICH_SET); */
				
#define PAPI_L3_ICH_TMPS  int PAPI_L3_ICH_SET, \
                             PAPI_L3_ICH_MASK; \
                         long long PAPI_L3_ICH_VALUE
												 
#define PAPI_L3_ICH_DECL  long long PAPI_L3_ICH_VAR

#define PAPI_L3_ICH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_ICH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_ICH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_ICH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_ICH_SET,&(exp).PAPI_L3_ICH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_ICH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_ICH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_ICH_VAR = (exp1).PAPI_L3_ICH_VALUE

#define PAPI_L3_ICH_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_ICH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_ICH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_ICH")
#define PAPI_L3_ICH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_ICH_VAR); 


#define PAPI_L3_ICH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_ICH_SET,(exp).PAPI_L3_ICH_MASK)


/*
 * PAPI_L1_ICA DEFINITIONS 
 */
#define PAPI_L1_ICA_INIT(exp) \
	 (exp).PAPI_L1_ICA_MASK = PAPI_L1_ICA; \
   (exp).PAPI_L1_ICA_SET = add_test_event((exp).PAPI_L1_ICA_MASK) 
	 /* ; printf("INIT:PAPI_L1_ICA_SET handle: %d\n",(exp).PAPI_L1_ICA_SET); */
				
#define PAPI_L1_ICA_TMPS  int PAPI_L1_ICA_SET, \
                             PAPI_L1_ICA_MASK; \
                         long long PAPI_L1_ICA_VALUE
												 
#define PAPI_L1_ICA_DECL  long long PAPI_L1_ICA_VAR

#define PAPI_L1_ICA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_ICA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_ICA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_ICA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_ICA_SET,&(exp).PAPI_L1_ICA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_ICA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_ICA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_ICA_VAR = (exp1).PAPI_L1_ICA_VALUE

#define PAPI_L1_ICA_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_ICA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_ICA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_ICA")
#define PAPI_L1_ICA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_ICA_VAR); 


#define PAPI_L1_ICA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_ICA_SET,(exp).PAPI_L1_ICA_MASK)


/*
 * PAPI_L2_ICA DEFINITIONS 
 */
#define PAPI_L2_ICA_INIT(exp) \
	 (exp).PAPI_L2_ICA_MASK = PAPI_L2_ICA; \
   (exp).PAPI_L2_ICA_SET = add_test_event((exp).PAPI_L2_ICA_MASK) 
	 /* ; printf("INIT:PAPI_L2_ICA_SET handle: %d\n",(exp).PAPI_L2_ICA_SET); */
				
#define PAPI_L2_ICA_TMPS  int PAPI_L2_ICA_SET, \
                             PAPI_L2_ICA_MASK; \
                         long long PAPI_L2_ICA_VALUE
												 
#define PAPI_L2_ICA_DECL  long long PAPI_L2_ICA_VAR

#define PAPI_L2_ICA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_ICA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_ICA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_ICA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_ICA_SET,&(exp).PAPI_L2_ICA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_ICA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_ICA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_ICA_VAR = (exp1).PAPI_L2_ICA_VALUE

#define PAPI_L2_ICA_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_ICA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_ICA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_ICA")
#define PAPI_L2_ICA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_ICA_VAR); 


#define PAPI_L2_ICA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_ICA_SET,(exp).PAPI_L2_ICA_MASK)


/*
 * PAPI_L3_ICA DEFINITIONS 
 */
#define PAPI_L3_ICA_INIT(exp) \
	 (exp).PAPI_L3_ICA_MASK = PAPI_L3_ICA; \
   (exp).PAPI_L3_ICA_SET = add_test_event((exp).PAPI_L3_ICA_MASK) 
	 /* ; printf("INIT:PAPI_L3_ICA_SET handle: %d\n",(exp).PAPI_L3_ICA_SET); */
				
#define PAPI_L3_ICA_TMPS  int PAPI_L3_ICA_SET, \
                             PAPI_L3_ICA_MASK; \
                         long long PAPI_L3_ICA_VALUE
												 
#define PAPI_L3_ICA_DECL  long long PAPI_L3_ICA_VAR

#define PAPI_L3_ICA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_ICA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_ICA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_ICA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_ICA_SET,&(exp).PAPI_L3_ICA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_ICA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_ICA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_ICA_VAR = (exp1).PAPI_L3_ICA_VALUE

#define PAPI_L3_ICA_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_ICA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_ICA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_ICA")
#define PAPI_L3_ICA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_ICA_VAR); 


#define PAPI_L3_ICA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_ICA_SET,(exp).PAPI_L3_ICA_MASK)


/*
 * PAPI_L1_ICR DEFINITIONS 
 */
#define PAPI_L1_ICR_INIT(exp) \
	 (exp).PAPI_L1_ICR_MASK = PAPI_L1_ICR; \
   (exp).PAPI_L1_ICR_SET = add_test_event((exp).PAPI_L1_ICR_MASK) 
	 /* ; printf("INIT:PAPI_L1_ICR_SET handle: %d\n",(exp).PAPI_L1_ICR_SET); */
				
#define PAPI_L1_ICR_TMPS  int PAPI_L1_ICR_SET, \
                             PAPI_L1_ICR_MASK; \
                         long long PAPI_L1_ICR_VALUE
												 
#define PAPI_L1_ICR_DECL  long long PAPI_L1_ICR_VAR

#define PAPI_L1_ICR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_ICR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_ICR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_ICR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_ICR_SET,&(exp).PAPI_L1_ICR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_ICR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_ICR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_ICR_VAR = (exp1).PAPI_L1_ICR_VALUE

#define PAPI_L1_ICR_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_ICR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_ICR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_ICR")
#define PAPI_L1_ICR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_ICR_VAR); 


#define PAPI_L1_ICR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_ICR_SET,(exp).PAPI_L1_ICR_MASK)


/*
 * PAPI_L2_ICR DEFINITIONS 
 */
#define PAPI_L2_ICR_INIT(exp) \
	 (exp).PAPI_L2_ICR_MASK = PAPI_L2_ICR; \
   (exp).PAPI_L2_ICR_SET = add_test_event((exp).PAPI_L2_ICR_MASK) 
	 /* ; printf("INIT:PAPI_L2_ICR_SET handle: %d\n",(exp).PAPI_L2_ICR_SET); */
				
#define PAPI_L2_ICR_TMPS  int PAPI_L2_ICR_SET, \
                             PAPI_L2_ICR_MASK; \
                         long long PAPI_L2_ICR_VALUE
												 
#define PAPI_L2_ICR_DECL  long long PAPI_L2_ICR_VAR

#define PAPI_L2_ICR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_ICR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_ICR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_ICR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_ICR_SET,&(exp).PAPI_L2_ICR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_ICR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_ICR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_ICR_VAR = (exp1).PAPI_L2_ICR_VALUE

#define PAPI_L2_ICR_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_ICR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_ICR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_ICR")
#define PAPI_L2_ICR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_ICR_VAR); 


#define PAPI_L2_ICR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_ICR_SET,(exp).PAPI_L2_ICR_MASK)


/*
 * PAPI_L3_ICR DEFINITIONS 
 */
#define PAPI_L3_ICR_INIT(exp) \
	 (exp).PAPI_L3_ICR_MASK = PAPI_L3_ICR; \
   (exp).PAPI_L3_ICR_SET = add_test_event((exp).PAPI_L3_ICR_MASK) 
	 /* ; printf("INIT:PAPI_L3_ICR_SET handle: %d\n",(exp).PAPI_L3_ICR_SET); */
				
#define PAPI_L3_ICR_TMPS  int PAPI_L3_ICR_SET, \
                             PAPI_L3_ICR_MASK; \
                         long long PAPI_L3_ICR_VALUE
												 
#define PAPI_L3_ICR_DECL  long long PAPI_L3_ICR_VAR

#define PAPI_L3_ICR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_ICR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_ICR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_ICR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_ICR_SET,&(exp).PAPI_L3_ICR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_ICR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_ICR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_ICR_VAR = (exp1).PAPI_L3_ICR_VALUE

#define PAPI_L3_ICR_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_ICR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_ICR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_ICR")
#define PAPI_L3_ICR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_ICR_VAR); 


#define PAPI_L3_ICR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_ICR_SET,(exp).PAPI_L3_ICR_MASK)


/*
 * PAPI_L1_ICW DEFINITIONS 
 */
#define PAPI_L1_ICW_INIT(exp) \
	 (exp).PAPI_L1_ICW_MASK = PAPI_L1_ICW; \
   (exp).PAPI_L1_ICW_SET = add_test_event((exp).PAPI_L1_ICW_MASK) 
	 /* ; printf("INIT:PAPI_L1_ICW_SET handle: %d\n",(exp).PAPI_L1_ICW_SET); */
				
#define PAPI_L1_ICW_TMPS  int PAPI_L1_ICW_SET, \
                             PAPI_L1_ICW_MASK; \
                         long long PAPI_L1_ICW_VALUE
												 
#define PAPI_L1_ICW_DECL  long long PAPI_L1_ICW_VAR

#define PAPI_L1_ICW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_ICW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_ICW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_ICW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_ICW_SET,&(exp).PAPI_L1_ICW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_ICW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_ICW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_ICW_VAR = (exp1).PAPI_L1_ICW_VALUE

#define PAPI_L1_ICW_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_ICW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_ICW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_ICW")
#define PAPI_L1_ICW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_ICW_VAR); 


#define PAPI_L1_ICW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_ICW_SET,(exp).PAPI_L1_ICW_MASK)


/*
 * PAPI_L2_ICW DEFINITIONS 
 */
#define PAPI_L2_ICW_INIT(exp) \
	 (exp).PAPI_L2_ICW_MASK = PAPI_L2_ICW; \
   (exp).PAPI_L2_ICW_SET = add_test_event((exp).PAPI_L2_ICW_MASK) 
	 /* ; printf("INIT:PAPI_L2_ICW_SET handle: %d\n",(exp).PAPI_L2_ICW_SET); */
				
#define PAPI_L2_ICW_TMPS  int PAPI_L2_ICW_SET, \
                             PAPI_L2_ICW_MASK; \
                         long long PAPI_L2_ICW_VALUE
												 
#define PAPI_L2_ICW_DECL  long long PAPI_L2_ICW_VAR

#define PAPI_L2_ICW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_ICW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_ICW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_ICW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_ICW_SET,&(exp).PAPI_L2_ICW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_ICW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_ICW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_ICW_VAR = (exp1).PAPI_L2_ICW_VALUE

#define PAPI_L2_ICW_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_ICW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_ICW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_ICW")
#define PAPI_L2_ICW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_ICW_VAR); 


#define PAPI_L2_ICW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_ICW_SET,(exp).PAPI_L2_ICW_MASK)


/*
 * PAPI_L3_ICW DEFINITIONS 
 */
#define PAPI_L3_ICW_INIT(exp) \
	 (exp).PAPI_L3_ICW_MASK = PAPI_L3_ICW; \
   (exp).PAPI_L3_ICW_SET = add_test_event((exp).PAPI_L3_ICW_MASK) 
	 /* ; printf("INIT:PAPI_L3_ICW_SET handle: %d\n",(exp).PAPI_L3_ICW_SET); */
				
#define PAPI_L3_ICW_TMPS  int PAPI_L3_ICW_SET, \
                             PAPI_L3_ICW_MASK; \
                         long long PAPI_L3_ICW_VALUE
												 
#define PAPI_L3_ICW_DECL  long long PAPI_L3_ICW_VAR

#define PAPI_L3_ICW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_ICW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_ICW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_ICW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_ICW_SET,&(exp).PAPI_L3_ICW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_ICW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_ICW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_ICW_VAR = (exp1).PAPI_L3_ICW_VALUE

#define PAPI_L3_ICW_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_ICW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_ICW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_ICW")
#define PAPI_L3_ICW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_ICW_VAR); 


#define PAPI_L3_ICW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_ICW_SET,(exp).PAPI_L3_ICW_MASK)


/*
 * PAPI_L1_TCH DEFINITIONS 
 */
#define PAPI_L1_TCH_INIT(exp) \
	 (exp).PAPI_L1_TCH_MASK = PAPI_L1_TCH; \
   (exp).PAPI_L1_TCH_SET = add_test_event((exp).PAPI_L1_TCH_MASK) 
	 /* ; printf("INIT:PAPI_L1_TCH_SET handle: %d\n",(exp).PAPI_L1_TCH_SET); */
				
#define PAPI_L1_TCH_TMPS  int PAPI_L1_TCH_SET, \
                             PAPI_L1_TCH_MASK; \
                         long long PAPI_L1_TCH_VALUE
												 
#define PAPI_L1_TCH_DECL  long long PAPI_L1_TCH_VAR

#define PAPI_L1_TCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_TCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_TCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_TCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_TCH_SET,&(exp).PAPI_L1_TCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_TCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_TCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_TCH_VAR = (exp1).PAPI_L1_TCH_VALUE

#define PAPI_L1_TCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_TCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_TCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_TCH")
#define PAPI_L1_TCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_TCH_VAR); 


#define PAPI_L1_TCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_TCH_SET,(exp).PAPI_L1_TCH_MASK)


/*
 * PAPI_L2_TCH DEFINITIONS 
 */
#define PAPI_L2_TCH_INIT(exp) \
	 (exp).PAPI_L2_TCH_MASK = PAPI_L2_TCH; \
   (exp).PAPI_L2_TCH_SET = add_test_event((exp).PAPI_L2_TCH_MASK) 
	 /* ; printf("INIT:PAPI_L2_TCH_SET handle: %d\n",(exp).PAPI_L2_TCH_SET); */
				
#define PAPI_L2_TCH_TMPS  int PAPI_L2_TCH_SET, \
                             PAPI_L2_TCH_MASK; \
                         long long PAPI_L2_TCH_VALUE
												 
#define PAPI_L2_TCH_DECL  long long PAPI_L2_TCH_VAR

#define PAPI_L2_TCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_TCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_TCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_TCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_TCH_SET,&(exp).PAPI_L2_TCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_TCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_TCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_TCH_VAR = (exp1).PAPI_L2_TCH_VALUE

#define PAPI_L2_TCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_TCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_TCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_TCH")
#define PAPI_L2_TCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_TCH_VAR); 


#define PAPI_L2_TCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_TCH_SET,(exp).PAPI_L2_TCH_MASK)


/*
 * PAPI_L3_TCH DEFINITIONS 
 */
#define PAPI_L3_TCH_INIT(exp) \
	 (exp).PAPI_L3_TCH_MASK = PAPI_L3_TCH; \
   (exp).PAPI_L3_TCH_SET = add_test_event((exp).PAPI_L3_TCH_MASK) 
	 /* ; printf("INIT:PAPI_L3_TCH_SET handle: %d\n",(exp).PAPI_L3_TCH_SET); */
				
#define PAPI_L3_TCH_TMPS  int PAPI_L3_TCH_SET, \
                             PAPI_L3_TCH_MASK; \
                         long long PAPI_L3_TCH_VALUE
												 
#define PAPI_L3_TCH_DECL  long long PAPI_L3_TCH_VAR

#define PAPI_L3_TCH_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_TCH_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_TCH", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_TCH_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_TCH_SET,&(exp).PAPI_L3_TCH_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_TCH", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_TCH_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_TCH_VAR = (exp1).PAPI_L3_TCH_VALUE

#define PAPI_L3_TCH_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_TCH_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_TCH_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_TCH")
#define PAPI_L3_TCH_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_TCH_VAR); 


#define PAPI_L3_TCH_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_TCH_SET,(exp).PAPI_L3_TCH_MASK)


/*
 * PAPI_L1_TCA DEFINITIONS 
 */
#define PAPI_L1_TCA_INIT(exp) \
	 (exp).PAPI_L1_TCA_MASK = PAPI_L1_TCA; \
   (exp).PAPI_L1_TCA_SET = add_test_event((exp).PAPI_L1_TCA_MASK) 
	 /* ; printf("INIT:PAPI_L1_TCA_SET handle: %d\n",(exp).PAPI_L1_TCA_SET); */
				
#define PAPI_L1_TCA_TMPS  int PAPI_L1_TCA_SET, \
                             PAPI_L1_TCA_MASK; \
                         long long PAPI_L1_TCA_VALUE
												 
#define PAPI_L1_TCA_DECL  long long PAPI_L1_TCA_VAR

#define PAPI_L1_TCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_TCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_TCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_TCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_TCA_SET,&(exp).PAPI_L1_TCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_TCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_TCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_TCA_VAR = (exp1).PAPI_L1_TCA_VALUE

#define PAPI_L1_TCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_TCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_TCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_TCA")
#define PAPI_L1_TCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_TCA_VAR); 


#define PAPI_L1_TCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_TCA_SET,(exp).PAPI_L1_TCA_MASK)


/*
 * PAPI_L2_TCA DEFINITIONS 
 */
#define PAPI_L2_TCA_INIT(exp) \
	 (exp).PAPI_L2_TCA_MASK = PAPI_L2_TCA; \
   (exp).PAPI_L2_TCA_SET = add_test_event((exp).PAPI_L2_TCA_MASK) 
	 /* ; printf("INIT:PAPI_L2_TCA_SET handle: %d\n",(exp).PAPI_L2_TCA_SET); */
				
#define PAPI_L2_TCA_TMPS  int PAPI_L2_TCA_SET, \
                             PAPI_L2_TCA_MASK; \
                         long long PAPI_L2_TCA_VALUE
												 
#define PAPI_L2_TCA_DECL  long long PAPI_L2_TCA_VAR

#define PAPI_L2_TCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_TCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_TCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_TCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_TCA_SET,&(exp).PAPI_L2_TCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_TCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_TCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_TCA_VAR = (exp1).PAPI_L2_TCA_VALUE

#define PAPI_L2_TCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_TCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_TCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_TCA")
#define PAPI_L2_TCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_TCA_VAR); 


#define PAPI_L2_TCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_TCA_SET,(exp).PAPI_L2_TCA_MASK)


/*
 * PAPI_L3_TCA DEFINITIONS 
 */
#define PAPI_L3_TCA_INIT(exp) \
	 (exp).PAPI_L3_TCA_MASK = PAPI_L3_TCA; \
   (exp).PAPI_L3_TCA_SET = add_test_event((exp).PAPI_L3_TCA_MASK) 
	 /* ; printf("INIT:PAPI_L3_TCA_SET handle: %d\n",(exp).PAPI_L3_TCA_SET); */
				
#define PAPI_L3_TCA_TMPS  int PAPI_L3_TCA_SET, \
                             PAPI_L3_TCA_MASK; \
                         long long PAPI_L3_TCA_VALUE
												 
#define PAPI_L3_TCA_DECL  long long PAPI_L3_TCA_VAR

#define PAPI_L3_TCA_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_TCA_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_TCA", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_TCA_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_TCA_SET,&(exp).PAPI_L3_TCA_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_TCA", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_TCA_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_TCA_VAR = (exp1).PAPI_L3_TCA_VALUE

#define PAPI_L3_TCA_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_TCA_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_TCA_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_TCA")
#define PAPI_L3_TCA_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_TCA_VAR); 


#define PAPI_L3_TCA_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_TCA_SET,(exp).PAPI_L3_TCA_MASK)


/*
 * PAPI_L1_TCR DEFINITIONS 
 */
#define PAPI_L1_TCR_INIT(exp) \
	 (exp).PAPI_L1_TCR_MASK = PAPI_L1_TCR; \
   (exp).PAPI_L1_TCR_SET = add_test_event((exp).PAPI_L1_TCR_MASK) 
	 /* ; printf("INIT:PAPI_L1_TCR_SET handle: %d\n",(exp).PAPI_L1_TCR_SET); */
				
#define PAPI_L1_TCR_TMPS  int PAPI_L1_TCR_SET, \
                             PAPI_L1_TCR_MASK; \
                         long long PAPI_L1_TCR_VALUE
												 
#define PAPI_L1_TCR_DECL  long long PAPI_L1_TCR_VAR

#define PAPI_L1_TCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_TCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_TCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_TCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_TCR_SET,&(exp).PAPI_L1_TCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_TCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_TCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_TCR_VAR = (exp1).PAPI_L1_TCR_VALUE

#define PAPI_L1_TCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_TCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_TCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_TCR")
#define PAPI_L1_TCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_TCR_VAR); 


#define PAPI_L1_TCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_TCR_SET,(exp).PAPI_L1_TCR_MASK)


/*
 * PAPI_L2_TCR DEFINITIONS 
 */
#define PAPI_L2_TCR_INIT(exp) \
	 (exp).PAPI_L2_TCR_MASK = PAPI_L2_TCR; \
   (exp).PAPI_L2_TCR_SET = add_test_event((exp).PAPI_L2_TCR_MASK) 
	 /* ; printf("INIT:PAPI_L2_TCR_SET handle: %d\n",(exp).PAPI_L2_TCR_SET); */
				
#define PAPI_L2_TCR_TMPS  int PAPI_L2_TCR_SET, \
                             PAPI_L2_TCR_MASK; \
                         long long PAPI_L2_TCR_VALUE
												 
#define PAPI_L2_TCR_DECL  long long PAPI_L2_TCR_VAR

#define PAPI_L2_TCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_TCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_TCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_TCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_TCR_SET,&(exp).PAPI_L2_TCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_TCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_TCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_TCR_VAR = (exp1).PAPI_L2_TCR_VALUE

#define PAPI_L2_TCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_TCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_TCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_TCR")
#define PAPI_L2_TCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_TCR_VAR); 


#define PAPI_L2_TCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_TCR_SET,(exp).PAPI_L2_TCR_MASK)


/*
 * PAPI_L3_TCR DEFINITIONS 
 */
#define PAPI_L3_TCR_INIT(exp) \
	 (exp).PAPI_L3_TCR_MASK = PAPI_L3_TCR; \
   (exp).PAPI_L3_TCR_SET = add_test_event((exp).PAPI_L3_TCR_MASK) 
	 /* ; printf("INIT:PAPI_L3_TCR_SET handle: %d\n",(exp).PAPI_L3_TCR_SET); */
				
#define PAPI_L3_TCR_TMPS  int PAPI_L3_TCR_SET, \
                             PAPI_L3_TCR_MASK; \
                         long long PAPI_L3_TCR_VALUE
												 
#define PAPI_L3_TCR_DECL  long long PAPI_L3_TCR_VAR

#define PAPI_L3_TCR_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_TCR_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_TCR", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_TCR_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_TCR_SET,&(exp).PAPI_L3_TCR_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_TCR", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_TCR_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_TCR_VAR = (exp1).PAPI_L3_TCR_VALUE

#define PAPI_L3_TCR_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_TCR_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_TCR_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_TCR")
#define PAPI_L3_TCR_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_TCR_VAR); 


#define PAPI_L3_TCR_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_TCR_SET,(exp).PAPI_L3_TCR_MASK)


/*
 * PAPI_L1_TCW DEFINITIONS 
 */
#define PAPI_L1_TCW_INIT(exp) \
	 (exp).PAPI_L1_TCW_MASK = PAPI_L1_TCW; \
   (exp).PAPI_L1_TCW_SET = add_test_event((exp).PAPI_L1_TCW_MASK) 
	 /* ; printf("INIT:PAPI_L1_TCW_SET handle: %d\n",(exp).PAPI_L1_TCW_SET); */
				
#define PAPI_L1_TCW_TMPS  int PAPI_L1_TCW_SET, \
                             PAPI_L1_TCW_MASK; \
                         long long PAPI_L1_TCW_VALUE
												 
#define PAPI_L1_TCW_DECL  long long PAPI_L1_TCW_VAR

#define PAPI_L1_TCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L1_TCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L1_TCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L1_TCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L1_TCW_SET,&(exp).PAPI_L1_TCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L1_TCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L1_TCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L1_TCW_VAR = (exp1).PAPI_L1_TCW_VALUE

#define PAPI_L1_TCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L1_TCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L1_TCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L1_TCW")
#define PAPI_L1_TCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L1_TCW_VAR); 


#define PAPI_L1_TCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L1_TCW_SET,(exp).PAPI_L1_TCW_MASK)


/*
 * PAPI_L2_TCW DEFINITIONS 
 */
#define PAPI_L2_TCW_INIT(exp) \
	 (exp).PAPI_L2_TCW_MASK = PAPI_L2_TCW; \
   (exp).PAPI_L2_TCW_SET = add_test_event((exp).PAPI_L2_TCW_MASK) 
	 /* ; printf("INIT:PAPI_L2_TCW_SET handle: %d\n",(exp).PAPI_L2_TCW_SET); */
				
#define PAPI_L2_TCW_TMPS  int PAPI_L2_TCW_SET, \
                             PAPI_L2_TCW_MASK; \
                         long long PAPI_L2_TCW_VALUE
												 
#define PAPI_L2_TCW_DECL  long long PAPI_L2_TCW_VAR

#define PAPI_L2_TCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L2_TCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L2_TCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L2_TCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L2_TCW_SET,&(exp).PAPI_L2_TCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L2_TCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L2_TCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L2_TCW_VAR = (exp1).PAPI_L2_TCW_VALUE

#define PAPI_L2_TCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L2_TCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L2_TCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L2_TCW")
#define PAPI_L2_TCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L2_TCW_VAR); 


#define PAPI_L2_TCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L2_TCW_SET,(exp).PAPI_L2_TCW_MASK)


/*
 * PAPI_L3_TCW DEFINITIONS 
 */
#define PAPI_L3_TCW_INIT(exp) \
	 (exp).PAPI_L3_TCW_MASK = PAPI_L3_TCW; \
   (exp).PAPI_L3_TCW_SET = add_test_event((exp).PAPI_L3_TCW_MASK) 
	 /* ; printf("INIT:PAPI_L3_TCW_SET handle: %d\n",(exp).PAPI_L3_TCW_SET); */
				
#define PAPI_L3_TCW_TMPS  int PAPI_L3_TCW_SET, \
                             PAPI_L3_TCW_MASK; \
                         long long PAPI_L3_TCW_VALUE
												 
#define PAPI_L3_TCW_DECL  long long PAPI_L3_TCW_VAR

#define PAPI_L3_TCW_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_L3_TCW_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "L3_TCW", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_L3_TCW_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_L3_TCW_SET,&(exp).PAPI_L3_TCW_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "L3_TCW", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_L3_TCW_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_L3_TCW_VAR = (exp1).PAPI_L3_TCW_VALUE

#define PAPI_L3_TCW_SAVE_INSTANCE(exp,inst) \
        PAPI_L3_TCW_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_L3_TCW_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_L3_TCW")
#define PAPI_L3_TCW_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_L3_TCW_VAR); 


#define PAPI_L3_TCW_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_L3_TCW_SET,(exp).PAPI_L3_TCW_MASK)


/*
 * PAPI_FML_INS DEFINITIONS 
 */
#define PAPI_FML_INS_INIT(exp) \
	 (exp).PAPI_FML_INS_MASK = PAPI_FML_INS; \
   (exp).PAPI_FML_INS_SET = add_test_event((exp).PAPI_FML_INS_MASK) 
	 /* ; printf("INIT:PAPI_FML_INS_SET handle: %d\n",(exp).PAPI_FML_INS_SET); */
				
#define PAPI_FML_INS_TMPS  int PAPI_FML_INS_SET, \
                             PAPI_FML_INS_MASK; \
                         long long PAPI_FML_INS_VALUE
												 
#define PAPI_FML_INS_DECL  long long PAPI_FML_INS_VAR

#define PAPI_FML_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FML_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FML_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FML_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FML_INS_SET,&(exp).PAPI_FML_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FML_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FML_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FML_INS_VAR = (exp1).PAPI_FML_INS_VALUE

#define PAPI_FML_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FML_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FML_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FML_INS")
#define PAPI_FML_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FML_INS_VAR); 


#define PAPI_FML_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FML_INS_SET,(exp).PAPI_FML_INS_MASK)


/*
 * PAPI_FAD_INS DEFINITIONS 
 */
#define PAPI_FAD_INS_INIT(exp) \
	 (exp).PAPI_FAD_INS_MASK = PAPI_FAD_INS; \
   (exp).PAPI_FAD_INS_SET = add_test_event((exp).PAPI_FAD_INS_MASK) 
	 /* ; printf("INIT:PAPI_FAD_INS_SET handle: %d\n",(exp).PAPI_FAD_INS_SET); */
				
#define PAPI_FAD_INS_TMPS  int PAPI_FAD_INS_SET, \
                             PAPI_FAD_INS_MASK; \
                         long long PAPI_FAD_INS_VALUE
												 
#define PAPI_FAD_INS_DECL  long long PAPI_FAD_INS_VAR

#define PAPI_FAD_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FAD_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FAD_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FAD_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FAD_INS_SET,&(exp).PAPI_FAD_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FAD_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FAD_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FAD_INS_VAR = (exp1).PAPI_FAD_INS_VALUE

#define PAPI_FAD_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FAD_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FAD_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FAD_INS")
#define PAPI_FAD_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FAD_INS_VAR); 


#define PAPI_FAD_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FAD_INS_SET,(exp).PAPI_FAD_INS_MASK)


/*
 * PAPI_FDV_INS DEFINITIONS 
 */
#define PAPI_FDV_INS_INIT(exp) \
	 (exp).PAPI_FDV_INS_MASK = PAPI_FDV_INS; \
   (exp).PAPI_FDV_INS_SET = add_test_event((exp).PAPI_FDV_INS_MASK) 
	 /* ; printf("INIT:PAPI_FDV_INS_SET handle: %d\n",(exp).PAPI_FDV_INS_SET); */
				
#define PAPI_FDV_INS_TMPS  int PAPI_FDV_INS_SET, \
                             PAPI_FDV_INS_MASK; \
                         long long PAPI_FDV_INS_VALUE
												 
#define PAPI_FDV_INS_DECL  long long PAPI_FDV_INS_VAR

#define PAPI_FDV_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FDV_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FDV_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FDV_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FDV_INS_SET,&(exp).PAPI_FDV_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FDV_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FDV_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FDV_INS_VAR = (exp1).PAPI_FDV_INS_VALUE

#define PAPI_FDV_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FDV_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FDV_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FDV_INS")
#define PAPI_FDV_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FDV_INS_VAR); 


#define PAPI_FDV_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FDV_INS_SET,(exp).PAPI_FDV_INS_MASK)


/*
 * PAPI_FSQ_INS DEFINITIONS 
 */
#define PAPI_FSQ_INS_INIT(exp) \
	 (exp).PAPI_FSQ_INS_MASK = PAPI_FSQ_INS; \
   (exp).PAPI_FSQ_INS_SET = add_test_event((exp).PAPI_FSQ_INS_MASK) 
	 /* ; printf("INIT:PAPI_FSQ_INS_SET handle: %d\n",(exp).PAPI_FSQ_INS_SET); */
				
#define PAPI_FSQ_INS_TMPS  int PAPI_FSQ_INS_SET, \
                             PAPI_FSQ_INS_MASK; \
                         long long PAPI_FSQ_INS_VALUE
												 
#define PAPI_FSQ_INS_DECL  long long PAPI_FSQ_INS_VAR

#define PAPI_FSQ_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FSQ_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FSQ_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FSQ_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FSQ_INS_SET,&(exp).PAPI_FSQ_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FSQ_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FSQ_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FSQ_INS_VAR = (exp1).PAPI_FSQ_INS_VALUE

#define PAPI_FSQ_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FSQ_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FSQ_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FSQ_INS")
#define PAPI_FSQ_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FSQ_INS_VAR); 


#define PAPI_FSQ_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FSQ_INS_SET,(exp).PAPI_FSQ_INS_MASK)


/*
 * PAPI_FNV_INS DEFINITIONS 
 */
#define PAPI_FNV_INS_INIT(exp) \
	 (exp).PAPI_FNV_INS_MASK = PAPI_FNV_INS; \
   (exp).PAPI_FNV_INS_SET = add_test_event((exp).PAPI_FNV_INS_MASK) 
	 /* ; printf("INIT:PAPI_FNV_INS_SET handle: %d\n",(exp).PAPI_FNV_INS_SET); */
				
#define PAPI_FNV_INS_TMPS  int PAPI_FNV_INS_SET, \
                             PAPI_FNV_INS_MASK; \
                         long long PAPI_FNV_INS_VALUE
												 
#define PAPI_FNV_INS_DECL  long long PAPI_FNV_INS_VAR

#define PAPI_FNV_INS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FNV_INS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FNV_INS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FNV_INS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FNV_INS_SET,&(exp).PAPI_FNV_INS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FNV_INS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FNV_INS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FNV_INS_VAR = (exp1).PAPI_FNV_INS_VALUE

#define PAPI_FNV_INS_SAVE_INSTANCE(exp,inst) \
        PAPI_FNV_INS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FNV_INS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FNV_INS")
#define PAPI_FNV_INS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FNV_INS_VAR); 


#define PAPI_FNV_INS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FNV_INS_SET,(exp).PAPI_FNV_INS_MASK)


/*
 * PAPI_FP_OPS DEFINITIONS 
 */
#define PAPI_FP_OPS_INIT(exp) \
	 (exp).PAPI_FP_OPS_MASK = PAPI_FP_OPS; \
   (exp).PAPI_FP_OPS_SET = add_test_event((exp).PAPI_FP_OPS_MASK) 
	 /* ; printf("INIT:PAPI_FP_OPS_SET handle: %d\n",(exp).PAPI_FP_OPS_SET); */
				
#define PAPI_FP_OPS_TMPS  int PAPI_FP_OPS_SET, \
                             PAPI_FP_OPS_MASK; \
                         long long PAPI_FP_OPS_VALUE
												 
#define PAPI_FP_OPS_DECL  long long PAPI_FP_OPS_VAR

#define PAPI_FP_OPS_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_FP_OPS_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "FP_OPS", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_FP_OPS_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_FP_OPS_SET,&(exp).PAPI_FP_OPS_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "FP_OPS", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_FP_OPS_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_FP_OPS_VAR = (exp1).PAPI_FP_OPS_VALUE

#define PAPI_FP_OPS_SAVE_INSTANCE(exp,inst) \
        PAPI_FP_OPS_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_FP_OPS_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_FP_OPS")
#define PAPI_FP_OPS_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_FP_OPS_VAR); 


#define PAPI_FP_OPS_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_FP_OPS_SET,(exp).PAPI_FP_OPS_MASK)


/*
 * PAPI_END DEFINITIONS 
 */
#define PAPI_END_INIT(exp) \
	 (exp).PAPI_END_MASK = PAPI_END; \
   (exp).PAPI_END_SET = add_test_event((exp).PAPI_END_MASK) 
	 /* ; printf("INIT:PAPI_END_SET handle: %d\n",(exp).PAPI_END_SET); */
				
#define PAPI_END_TMPS  int PAPI_END_SET, \
                             PAPI_END_MASK; \
                         long long PAPI_END_VALUE
												 
#define PAPI_END_DECL  long long PAPI_END_VAR

#define PAPI_END_START_OBS(exp) \
				 /*{  */\
				 /*  int retval;  */\
         /*  retval = */\
             PAPI_start((exp).PAPI_END_SET) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*  printf("ERROR:PAPI START: %s\n", "END", (exp).numtests);\*/
				 /*		exit(1);\*/
				 /*	 }\*/
				 /*}*/

#define PAPI_END_STOP_OBS(exp)  \
				 /*{  */\
				 /*  int retval;  */\
         /*	 retval =  */\
             PAPI_stop((exp).PAPI_END_SET,&(exp).PAPI_END_VALUE) 
				 /*		; \*/
				 /*  if (retval != PAPI_OK) {\*/
				 /*    printf("ERROR:PAPI STOP: %s\n", "END", (exp).numtests);\*/
				 /*			exit(1);\*/
				 /*	 }\*/
				 /*}*/ 


#define PAPI_END_SAVE_INSTANCE_OPT(exp2,exp1,inst)  \
        (exp1).instance[(inst)].PAPI_END_VAR = (exp1).PAPI_END_VALUE

#define PAPI_END_SAVE_INSTANCE(exp,inst) \
        PAPI_END_SAVE_INSTANCE_OPT((exp),(exp),(inst))

#define PAPI_END_PRINT_TITLE(exp)	\
        cll_print_field_title("%14s  ", "PAPI_END")
#define PAPI_END_PRINT_VALUE(exp,instance) \
        cll_print_field_value("%14lld  ", (instance).PAPI_END_VAR); 


#define PAPI_END_FINALIZE(exp) \
   remove_test_event(&(exp).PAPI_END_SET,(exp).PAPI_END_MASK)


/* This file defines 104 different PAPI events */
 
